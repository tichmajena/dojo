{"version":3,"sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/./src/drawer.canvasentry.js","webpack://WaveSurfer/./src/drawer.js","webpack://WaveSurfer/./src/drawer.multicanvas.js","webpack://WaveSurfer/./src/mediaelement-webaudio.js","webpack://WaveSurfer/./src/mediaelement.js","webpack://WaveSurfer/./src/peakcache.js","webpack://WaveSurfer/./src/util/absMax.js","webpack://WaveSurfer/./src/util/clamp.js","webpack://WaveSurfer/./src/util/fetch.js","webpack://WaveSurfer/./src/util/frame.js","webpack://WaveSurfer/./src/util/get-id.js","webpack://WaveSurfer/./src/util/index.js","webpack://WaveSurfer/./src/util/max.js","webpack://WaveSurfer/./src/util/min.js","webpack://WaveSurfer/./src/util/observer.js","webpack://WaveSurfer/./src/util/prevent-click.js","webpack://WaveSurfer/./src/util/request-animation-frame.js","webpack://WaveSurfer/./src/util/style.js","webpack://WaveSurfer/./src/wavesurfer.js","webpack://WaveSurfer/./src/webaudio.js","webpack://WaveSurfer/./node_modules/debounce/index.js","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/webpack/startup"],"names":["root","factory","exports","module","define","amd","this","CanvasEntry","wave","waveCtx","progress","progressCtx","start","end","id","constructor","name","toLowerCase","canvasContextAttributes","element","getContext","elementWidth","totalWidth","width","height","offsetLeft","elementSize","hasProgressCanvas","clearRect","canvas","waveColor","progressColor","fillStyle","x","y","radius","fillRectToContext","ctx","drawRoundedRect","fillRect","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","peaks","absmax","halfH","offsetY","drawLineToContext","i","peak","h","length","first","Math","round","canvasStart","canvasEnd","scale","halfOffset","absmaxHalf","halfPixel","j","format","quality","type","Promise","resolve","toBlob","toDataURL","Drawer","container","params","pixelRatio","lastPos","wrapper","el","styles","util","style","appendChild","document","createElement","display","position","userSelect","webkitUserSelect","fillParent","scrollParent","overflowX","hideScrollbar","overflowY","setupWrapperEvents","e","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","nominalWidth","parentWidth","getWidth","rtl","right","left","scrollLeft","scrollWidth","clamp","addEventListener","scrollbarHeight","offsetHeight","clientHeight","clientY","bottom","interact","fireEvent","handleEvent","setWidth","clearWave","barWidth","drawBars","drawWave","percent","recenterOnPosition","immediate","half","clientWidth","maxScroll","target","offset","rate","autoCenterRate","max","min","updateSize","minPxDelta","pos","autoCenter","newPos","autoCenterImmediately","updateProgress","unAll","parentNode","removeChild","channelIndex","Observer","MultiCanvas","maxCanvasWidth","maxCanvasElementWidth","canvases","progressWave","EntryClass","drawingContextAttributes","overlap","ceil","barRadius","createWrapper","createElements","zIndex","top","overflow","boxSizing","borderRightStyle","pointerEvents","addCanvas","updateCursor","borderRightWidth","cursorWidth","borderRightColor","cursorColor","requiredCanvases","removeCanvas","canvasWidth","lastCanvas","forEach","entry","updateDimensions","leftOffset","initWave","initProgress","push","lastEntry","parentElement","destroy","pop","frame","prepareDraw","hasMinVals","ch","undefined","peakIndexScale","bar","step","barGap","last","floor","barMinHeight","reflectedPeaks","len","drawLine","splitChannelsOptions","channelColors","setFillStyles","drawLines","startCanvas","endCanvas","intersection","x1","y1","x2","y2","fillRects","splitChannels","filterChannels","includes","fn","drawIndex","normalizedMax","Array","channels","overallAbsMax","filteredChannels","filter","c","hideChannel","overlay","setHeight","relativeNormalization","map","channelPeaks","absMax","indexOf","barHeight","normalize","some","call","val","all","getImage","images","MediaElementWebAudio","sourceMediaElement","setPlaybackRate","audioRate","createTimer","createVolumeNode","createScriptNode","createAnalyserNode","media","preload","createMediaElementSource","mediaElement","ac","connect","analyser","resumeAudioContext","destroyWebAudio","MediaElement","currentTime","duration","paused","playbackRate","play","pause","volume","mediaType","elementPosition","isMuted","buffer","onPlayEnd","mediaListeners","error","canplay","ended","seeked","event","volumechange","muted","Object","keys","removeEventListener","on","onAudioProcess","isPaused","getCurrentTime","url","controls","mediaControls","autoplay","src","prevMedia","querySelector","_load","elt","HTMLMediaElement","Error","load","_setupMediaListeners","setVolume","explicitDuration","Infinity","seekable","getDuration","value","clearPlayEnd","seekTo","promise","setPlayEnd","_onPlayEnd","time","un","deviceId","setSinkId","reject","destroyed","removeMediaElementOnDestroy","WebAudio","PeakCache","clearPeakCache","peakCacheRanges","peakCacheLength","uncachedRanges","item","arr","concat","sort","a","b","uncachedRangePairs","peakCacheRangePairs","values","options","instance","fetchHeaders","Headers","fetchRequest","Request","controller","AbortController","requestHeaders","header","append","key","responseType","fetchOptions","method","headers","mode","credentials","cache","redirect","referrer","signal","fetch","then","response","progressAvailable","body","contentLength","get","onProgress","Response","ReadableStream","ProgressHandler","errMsg","ok","arrayBuffer","json","blob","text","status","catch","_reader","getReader","total","parseInt","loaded","read","done","lengthComputable","close","byteLength","enqueue","func","args","prefix","random","toString","substring","largest","smallest","Number","_disabledEventEmissions","handlers","callback","splice","handler","apply","setTimeout","eventNames","_isDisabledEventEmission","preventClickHandler","stopPropagation","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","bind","prop","WaveSurfer","defaultParams","audioContext","audioScriptProcessor","backend","backgroundColor","dragSelection","desynchronized","forceDecode","loopSelection","mediaContainer","minPxPerSec","partialRender","devicePixelRatio","screen","deviceXDPI","logicalXDPI","plugins","renderer","responsive","skipLength","xhr","backends","assign","transform","setBackgroundColor","savedVolume","tmpEvents","currentRequest","arraybuffer","drawer","peakCache","prototype","supportsWebAudio","Backend","initialisedPluginList","isDestroyed","isReady","prevWidth","_onResize","debounce","init","registerPlugins","createDrawer","createBackend","createPeakCache","plugin","addPlugin","deferInit","initPlugin","staticProps","pluginStaticProp","Instance","getOwnPropertyNames","destroyPlugin","drawBuffer","getPlayedPercents","newVolume","getVolume","seconds","skip","seekAndCenter","recenter","isFinite","isWebAudioBackend","oldScrollParent","getPlaybackRate","setMute","mute","filters","color","background","channelIndices","newRanges","addRangeToPeakCache","getPeaks","drawPeaks","pxPerSec","decodeArrayBuffer","data","loadDecodedBuffer","reader","FileReader","loadArrayBuffer","result","readAsArrayBuffer","empty","preloadIgnoreReasons","activeReasons","reason","console","warn","join","loadBuffer","loadMediaElement","action","once","getArrayBuffer","setPeaks","urlOrElt","loadElt","err","request","fetchFile","percentComplete","accuracy","noWindow","JSON","stringify","open","encodeURIComponent","cancel","abort","stop","disconnectSource","cancelAjax","clearTmpEvents","destroyAllPlugins","VERSION","__VERSION__","PLAYING","PAUSED","FINISHED","offlineAudioContext","stateBehaviors","addOnAudioProcess","startPosition","getPlayedTime","removeOnAudioProcess","getAudioContext","lastPlay","scheduledPause","states","create","gainNode","mergedPeaks","offlineAc","scriptNode","source","splitPeaks","state","AudioContext","webkitAudioContext","WaveSurferAudioContext","sampleRate","WaveSurferOfflineAudioContext","OfflineAudioContext","webkitOfflineAudioContext","setState","setLength","disconnect","setFilters","disconnectFilters","reduce","prev","curr","createScriptProcessor","scriptBufferSize","createJavaScriptNode","destination","onaudioprocess","createAnalyser","createGain","createGainNode","audio","Audio","dest","createMediaStreamDestination","srcObject","stream","gain","setValueAtTime","errback","getOfflineAudioContext","decodeAudioData","numberOfChannels","newBuffer","createBuffer","sampleSize","sampleStep","chan","getChannelData","closeAudioContext","createSource","createBufferSource","noteGrainOn","noteOff","resume","adjustedTime","wait","timeout","context","timestamp","later","Date","now","debounced","arguments","callNow","clear","clearTimeout","flush","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"wavesurfer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(this, function() {\nreturn ","/**\r\n * @since 3.0.0\r\n */\r\n\r\nimport style from './util/style';\r\nimport getId from './util/get-id';\r\n\r\n/**\r\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\r\n * and an (optional) progress wave `canvas`.\r\n *\r\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\r\n * render a waveform, depending on the zoom level.\r\n */\r\nexport default class CanvasEntry {\r\n    constructor() {\r\n        /**\r\n         * The wave node\r\n         *\r\n         * @type {HTMLCanvasElement}\r\n         */\r\n        this.wave = null;\r\n        /**\r\n         * The wave canvas rendering context\r\n         *\r\n         * @type {CanvasRenderingContext2D}\r\n         */\r\n        this.waveCtx = null;\r\n        /**\r\n         * The (optional) progress wave node\r\n         *\r\n         * @type {HTMLCanvasElement}\r\n         */\r\n        this.progress = null;\r\n        /**\r\n         * The (optional) progress wave canvas rendering context\r\n         *\r\n         * @type {CanvasRenderingContext2D}\r\n         */\r\n        this.progressCtx = null;\r\n        /**\r\n         * Start of the area the canvas should render, between 0 and 1\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.start = 0;\r\n        /**\r\n         * End of the area the canvas should render, between 0 and 1\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.end = 1;\r\n        /**\r\n         * Unique identifier for this entry\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.id = getId(\r\n            typeof this.constructor.name !== 'undefined'\r\n                ? this.constructor.name.toLowerCase() + '_'\r\n                : 'canvasentry_'\r\n        );\r\n        /**\r\n         * Canvas 2d context attributes\r\n         *\r\n         * @type {object}\r\n         */\r\n        this.canvasContextAttributes = {};\r\n    }\r\n\r\n    /**\r\n     * Store the wave canvas element and create the 2D rendering context\r\n     *\r\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\r\n     */\r\n    initWave(element) {\r\n        this.wave = element;\r\n        this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\r\n    }\r\n\r\n    /**\r\n     * Store the progress wave canvas element and create the 2D rendering\r\n     * context\r\n     *\r\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\r\n     */\r\n    initProgress(element) {\r\n        this.progress = element;\r\n        this.progressCtx = this.progress.getContext(\r\n            '2d',\r\n            this.canvasContextAttributes\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Update the dimensions\r\n     *\r\n     * @param {number} elementWidth Width of the entry\r\n     * @param {number} totalWidth Total width of the multi canvas renderer\r\n     * @param {number} width The new width of the element\r\n     * @param {number} height The new height of the element\r\n     */\r\n    updateDimensions(elementWidth, totalWidth, width, height) {\r\n        // where the canvas starts and ends in the waveform, represented as a\r\n        // decimal between 0 and 1\r\n        this.start = this.wave.offsetLeft / totalWidth || 0;\r\n        this.end = this.start + elementWidth / totalWidth;\r\n\r\n        // set wave canvas dimensions\r\n        this.wave.width = width;\r\n        this.wave.height = height;\r\n        let elementSize = { width: elementWidth + 'px' };\r\n        style(this.wave, elementSize);\r\n\r\n        if (this.hasProgressCanvas) {\r\n            // set progress canvas dimensions\r\n            this.progress.width = width;\r\n            this.progress.height = height;\r\n            style(this.progress, elementSize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the wave and progress rendering contexts\r\n     */\r\n    clearWave() {\r\n        // wave\r\n        this.waveCtx.clearRect(\r\n            0,\r\n            0,\r\n            this.waveCtx.canvas.width,\r\n            this.waveCtx.canvas.height\r\n        );\r\n\r\n        // progress\r\n        if (this.hasProgressCanvas) {\r\n            this.progressCtx.clearRect(\r\n                0,\r\n                0,\r\n                this.progressCtx.canvas.width,\r\n                this.progressCtx.canvas.height\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the fill styles for wave and progress\r\n     *\r\n     * @param {string} waveColor Fill color for the wave canvas\r\n     * @param {?string} progressColor Fill color for the progress canvas\r\n     */\r\n    setFillStyles(waveColor, progressColor) {\r\n        this.waveCtx.fillStyle = waveColor;\r\n\r\n        if (this.hasProgressCanvas) {\r\n            this.progressCtx.fillStyle = progressColor;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw a rectangle for wave and progress\r\n     *\r\n     * @param {number} x X start position\r\n     * @param {number} y Y start position\r\n     * @param {number} width Width of the rectangle\r\n     * @param {number} height Height of the rectangle\r\n     * @param {number} radius Radius of the rectangle\r\n     */\r\n    fillRects(x, y, width, height, radius) {\r\n        this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\r\n\r\n        if (this.hasProgressCanvas) {\r\n            this.fillRectToContext(\r\n                this.progressCtx,\r\n                x,\r\n                y,\r\n                width,\r\n                height,\r\n                radius\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw the actual rectangle on a `canvas` element\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\r\n     * @param {number} x X start position\r\n     * @param {number} y Y start position\r\n     * @param {number} width Width of the rectangle\r\n     * @param {number} height Height of the rectangle\r\n     * @param {number} radius Radius of the rectangle\r\n     */\r\n    fillRectToContext(ctx, x, y, width, height, radius) {\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n\r\n        if (radius) {\r\n            this.drawRoundedRect(ctx, x, y, width, height, radius);\r\n        } else {\r\n            ctx.fillRect(x, y, width, height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw a rounded rectangle on Canvas\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx Canvas context\r\n     * @param {number} x X-position of the rectangle\r\n     * @param {number} y Y-position of the rectangle\r\n     * @param {number} width Width of the rectangle\r\n     * @param {number} height Height of the rectangle\r\n     * @param {number} radius Radius of the rectangle\r\n     *\r\n     * @return {void}\r\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\r\n     */\r\n    drawRoundedRect(ctx, x, y, width, height, radius) {\r\n        if (height === 0) {\r\n            return;\r\n        }\r\n        // peaks are float values from -1 to 1. Use absolute height values in\r\n        // order to correctly calculate rounded rectangle coordinates\r\n        if (height < 0) {\r\n            height *= -1;\r\n            y -= height;\r\n        }\r\n        ctx.beginPath();\r\n        ctx.moveTo(x + radius, y);\r\n        ctx.lineTo(x + width - radius, y);\r\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        ctx.lineTo(x + width, y + height - radius);\r\n        ctx.quadraticCurveTo(\r\n            x + width,\r\n            y + height,\r\n            x + width - radius,\r\n            y + height\r\n        );\r\n        ctx.lineTo(x + radius, y + height);\r\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        ctx.lineTo(x, y + radius);\r\n        ctx.quadraticCurveTo(x, y, x + radius, y);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n\r\n    /**\r\n     * Render the actual wave and progress lines\r\n     *\r\n     * @param {number[]} peaks Array with peaks data\r\n     * @param {number} absmax Maximum peak value (absolute)\r\n     * @param {number} halfH Half the height of the waveform\r\n     * @param {number} offsetY Offset to the top\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that\r\n     * should be rendered\r\n     */\r\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\r\n        this.drawLineToContext(\r\n            this.waveCtx,\r\n            peaks,\r\n            absmax,\r\n            halfH,\r\n            offsetY,\r\n            start,\r\n            end\r\n        );\r\n\r\n        if (this.hasProgressCanvas) {\r\n            this.drawLineToContext(\r\n                this.progressCtx,\r\n                peaks,\r\n                absmax,\r\n                halfH,\r\n                offsetY,\r\n                start,\r\n                end\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render the actual waveform line on a `canvas` element\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\r\n     * @param {number[]} peaks Array with peaks data\r\n     * @param {number} absmax Maximum peak value (absolute)\r\n     * @param {number} halfH Half the height of the waveform\r\n     * @param {number} offsetY Offset to the top\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that\r\n     * should be rendered\r\n     */\r\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n\r\n        const length = peaks.length / 2;\r\n        const first = Math.round(length * this.start);\r\n\r\n        // use one more peak value to make sure we join peaks at ends -- unless,\r\n        // of course, this is the last canvas\r\n        const last = Math.round(length * this.end) + 1;\r\n\r\n        const canvasStart = first;\r\n        const canvasEnd = last;\r\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\r\n\r\n        // optimization\r\n        const halfOffset = halfH + offsetY;\r\n        const absmaxHalf = absmax / halfH;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\r\n\r\n        ctx.lineTo(\r\n            (canvasStart - first) * scale,\r\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\r\n        );\r\n\r\n        let i, peak, h;\r\n        for (i = canvasStart; i < canvasEnd; i++) {\r\n            peak = peaks[2 * i] || 0;\r\n            h = Math.round(peak / absmaxHalf);\r\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\r\n        }\r\n\r\n        // draw the bottom edge going backwards, to make a single\r\n        // closed hull to fill\r\n        let j = canvasEnd - 1;\r\n        for (j; j >= canvasStart; j--) {\r\n            peak = peaks[2 * j + 1] || 0;\r\n            h = Math.round(peak / absmaxHalf);\r\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\r\n        }\r\n\r\n        ctx.lineTo(\r\n            (canvasStart - first) * scale,\r\n            halfOffset -\r\n                Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\r\n        );\r\n\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n\r\n    /**\r\n     * Destroys this entry\r\n     */\r\n    destroy() {\r\n        this.waveCtx = null;\r\n        this.wave = null;\r\n\r\n        this.progressCtx = null;\r\n        this.progress = null;\r\n    }\r\n\r\n    /**\r\n     * Return image data of the wave `canvas` element\r\n     *\r\n     * When using a `type` of `'blob'`, this will return a `Promise` that\r\n     * resolves with a `Blob` instance.\r\n     *\r\n     * @param {string} format='image/png' An optional value of a format type.\r\n     * @param {number} quality=0.92 An optional value between 0 and 1.\r\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\r\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\r\n     * returns a data URL. When using the `'blob'` `type` this returns a\r\n     * `Promise` that resolves with a `Blob` instance.\r\n     */\r\n    getImage(format, quality, type) {\r\n        if (type === 'blob') {\r\n            return new Promise(resolve => {\r\n                this.wave.toBlob(resolve, format, quality);\r\n            });\r\n        } else if (type === 'dataURL') {\r\n            return this.wave.toDataURL(format, quality);\r\n        }\r\n    }\r\n}\r\n","import * as util from './util';\r\n\r\n/**\r\n * Parent class for renderers\r\n *\r\n * @extends {Observer}\r\n */\r\nexport default class Drawer extends util.Observer {\r\n    /**\r\n     * @param {HTMLElement} container The container node of the wavesurfer instance\r\n     * @param {WavesurferParams} params The wavesurfer initialisation options\r\n     */\r\n    constructor(container, params) {\r\n        super();\r\n\r\n        this.container = container;\r\n        /**\r\n         * @type {WavesurferParams}\r\n         */\r\n        this.params = params;\r\n        /**\r\n         * The width of the renderer\r\n         * @type {number}\r\n         */\r\n        this.width = 0;\r\n        /**\r\n         * The height of the renderer\r\n         * @type {number}\r\n         */\r\n        this.height = params.height * this.params.pixelRatio;\r\n\r\n        this.lastPos = 0;\r\n        /**\r\n         * The `<wave>` element which is added to the container\r\n         * @type {HTMLElement}\r\n         */\r\n        this.wrapper = null;\r\n    }\r\n\r\n    /**\r\n     * Alias of `util.style`\r\n     *\r\n     * @param {HTMLElement} el The element that the styles will be applied to\r\n     * @param {Object} styles The map of propName: attribute, both are used as-is\r\n     * @return {HTMLElement} el\r\n     */\r\n    style(el, styles) {\r\n        return util.style(el, styles);\r\n    }\r\n\r\n    /**\r\n     * Create the wrapper `<wave>` element, style it and set up the events for\r\n     * interaction\r\n     */\r\n    createWrapper() {\r\n        this.wrapper = this.container.appendChild(\r\n            document.createElement('wave')\r\n        );\r\n\r\n        this.style(this.wrapper, {\r\n            display: 'block',\r\n            position: 'relative',\r\n            userSelect: 'none',\r\n            webkitUserSelect: 'none',\r\n            height: this.params.height + 'px'\r\n        });\r\n\r\n        if (this.params.fillParent || this.params.scrollParent) {\r\n            this.style(this.wrapper, {\r\n                width: '100%',\r\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\r\n                overflowY: 'hidden'\r\n            });\r\n        }\r\n\r\n        this.setupWrapperEvents();\r\n    }\r\n\r\n    /**\r\n     * Handle click event\r\n     *\r\n     * @param {Event} e Click event\r\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\r\n     * @return {number} Playback position from 0 to 1\r\n     */\r\n    handleEvent(e, noPrevent) {\r\n        !noPrevent && e.preventDefault();\r\n\r\n        const clientX = e.targetTouches\r\n            ? e.targetTouches[0].clientX\r\n            : e.clientX;\r\n        const bbox = this.wrapper.getBoundingClientRect();\r\n\r\n        const nominalWidth = this.width;\r\n        const parentWidth = this.getWidth();\r\n\r\n        let progress;\r\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\r\n            progress =\r\n                (this.params.rtl ? bbox.right - clientX : clientX - bbox.left) *\r\n                    (this.params.pixelRatio / nominalWidth) || 0;\r\n        } else {\r\n            progress =\r\n                ((this.params.rtl\r\n                    ? bbox.right - clientX\r\n                    : clientX - bbox.left) +\r\n                    this.wrapper.scrollLeft) /\r\n                    this.wrapper.scrollWidth || 0;\r\n        }\r\n\r\n        return util.clamp(progress, 0, 1);\r\n    }\r\n\r\n    setupWrapperEvents() {\r\n        this.wrapper.addEventListener('click', e => {\r\n            const scrollbarHeight =\r\n                this.wrapper.offsetHeight - this.wrapper.clientHeight;\r\n            if (scrollbarHeight !== 0) {\r\n                // scrollbar is visible.  Check if click was on it\r\n                const bbox = this.wrapper.getBoundingClientRect();\r\n                if (e.clientY >= bbox.bottom - scrollbarHeight) {\r\n                    // ignore mousedown as it was on the scrollbar\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (this.params.interact) {\r\n                this.fireEvent('click', e, this.handleEvent(e));\r\n            }\r\n        });\r\n\r\n        this.wrapper.addEventListener('dblclick', e => {\r\n            if (this.params.interact) {\r\n                this.fireEvent('dblclick', e, this.handleEvent(e));\r\n            }\r\n        });\r\n\r\n        this.wrapper.addEventListener('scroll', e =>\r\n            this.fireEvent('scroll', e)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Draw peaks on the canvas\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\r\n     * for split channel rendering\r\n     * @param {number} length The width of the area that should be drawn\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawPeaks(peaks, length, start, end) {\r\n        if (!this.setWidth(length)) {\r\n            this.clearWave();\r\n        }\r\n\r\n        this.params.barWidth\r\n            ? this.drawBars(peaks, 0, start, end)\r\n            : this.drawWave(peaks, 0, start, end);\r\n    }\r\n\r\n    /**\r\n     * Scroll to the beginning\r\n     */\r\n    resetScroll() {\r\n        if (this.wrapper !== null) {\r\n            this.wrapper.scrollLeft = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recenter the view-port at a certain percent of the waveform\r\n     *\r\n     * @param {number} percent Value from 0 to 1 on the waveform\r\n     */\r\n    recenter(percent) {\r\n        const position = this.wrapper.scrollWidth * percent;\r\n        this.recenterOnPosition(position, true);\r\n    }\r\n\r\n    /**\r\n     * Recenter the view-port on a position, either scroll there immediately or\r\n     * in steps of 5 pixels\r\n     *\r\n     * @param {number} position X-offset in pixels\r\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\r\n     */\r\n    recenterOnPosition(position, immediate) {\r\n        const scrollLeft = this.wrapper.scrollLeft;\r\n        const half = ~~(this.wrapper.clientWidth / 2);\r\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\r\n        let target = position - half;\r\n        let offset = target - scrollLeft;\r\n\r\n        if (maxScroll == 0) {\r\n            // no need to continue if scrollbar is not there\r\n            return;\r\n        }\r\n\r\n        // if the cursor is currently visible...\r\n        if (!immediate && -half <= offset && offset < half) {\r\n            // set rate at which waveform is centered\r\n            let rate = this.params.autoCenterRate;\r\n\r\n            // make rate depend on width of view and length of waveform\r\n            rate /= half;\r\n            rate *= maxScroll;\r\n\r\n            offset = Math.max(-rate, Math.min(rate, offset));\r\n            target = scrollLeft + offset;\r\n        }\r\n\r\n        // limit target to valid range (0 to maxScroll)\r\n        target = Math.max(0, Math.min(maxScroll, target));\r\n        // no use attempting to scroll if we're not moving\r\n        if (target != scrollLeft) {\r\n            this.wrapper.scrollLeft = target;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the current scroll position in pixels\r\n     *\r\n     * @return {number} Horizontal scroll position in pixels\r\n     */\r\n    getScrollX() {\r\n        let x = 0;\r\n        if (this.wrapper) {\r\n            const pixelRatio = this.params.pixelRatio;\r\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\r\n\r\n            // In cases of elastic scroll (safari with mouse wheel) you can\r\n            // scroll beyond the limits of the container\r\n            // Calculate and floor the scrollable extent to make sure an out\r\n            // of bounds value is not returned\r\n            // Ticket #1312\r\n            if (this.params.scrollParent) {\r\n                const maxScroll = ~~(\r\n                    this.wrapper.scrollWidth * pixelRatio -\r\n                    this.getWidth()\r\n                );\r\n                x = Math.min(maxScroll, Math.max(0, x));\r\n            }\r\n        }\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * Get the width of the container\r\n     *\r\n     * @return {number} The width of the container\r\n     */\r\n    getWidth() {\r\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\r\n    }\r\n\r\n    /**\r\n     * Set the width of the container\r\n     *\r\n     * @param {number} width The new width of the container\r\n     * @return {boolean} Whether the width of the container was updated or not\r\n     */\r\n    setWidth(width) {\r\n        if (this.width == width) {\r\n            return false;\r\n        }\r\n\r\n        this.width = width;\r\n\r\n        if (this.params.fillParent || this.params.scrollParent) {\r\n            this.style(this.wrapper, {\r\n                width: ''\r\n            });\r\n        } else {\r\n            this.style(this.wrapper, {\r\n                width: ~~(this.width / this.params.pixelRatio) + 'px'\r\n            });\r\n        }\r\n\r\n        this.updateSize();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set the height of the container\r\n     *\r\n     * @param {number} height The new height of the container.\r\n     * @return {boolean} Whether the height of the container was updated or not\r\n     */\r\n    setHeight(height) {\r\n        if (height == this.height) {\r\n            return false;\r\n        }\r\n        this.height = height;\r\n\r\n        this.style(this.wrapper, {\r\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\r\n        });\r\n\r\n        this.updateSize();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Called by wavesurfer when progress should be rendered\r\n     *\r\n     * @param {number} progress From 0 to 1\r\n     */\r\n    progress(progress) {\r\n        const minPxDelta = 1 / this.params.pixelRatio;\r\n        const pos = Math.round(progress * this.width) * minPxDelta;\r\n\r\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\r\n            this.lastPos = pos;\r\n\r\n            if (this.params.scrollParent && this.params.autoCenter) {\r\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\r\n                this.recenterOnPosition(\r\n                    newPos,\r\n                    this.params.autoCenterImmediately\r\n                );\r\n            }\r\n\r\n            this.updateProgress(pos);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     */\r\n    destroy() {\r\n        this.unAll();\r\n        if (this.wrapper) {\r\n            if (this.wrapper.parentNode == this.container) {\r\n                this.container.removeChild(this.wrapper);\r\n            }\r\n            this.wrapper = null;\r\n        }\r\n    }\r\n\r\n    /* Renderer-specific methods */\r\n\r\n    /**\r\n     * Called after cursor related params have changed.\r\n     *\r\n     * @abstract\r\n     */\r\n    updateCursor() {}\r\n\r\n    /**\r\n     * Called when the size of the container changes so the renderer can adjust\r\n     *\r\n     * @abstract\r\n     */\r\n    updateSize() {}\r\n\r\n    /**\r\n     * Draw a waveform with bars\r\n     *\r\n     * @abstract\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\r\n     * rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawBars(peaks, channelIndex, start, end) {}\r\n\r\n    /**\r\n     * Draw a waveform\r\n     *\r\n     * @abstract\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\r\n     * rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawWave(peaks, channelIndex, start, end) {}\r\n\r\n    /**\r\n     * Clear the waveform\r\n     *\r\n     * @abstract\r\n     */\r\n    clearWave() {}\r\n\r\n    /**\r\n     * Render the new progress\r\n     *\r\n     * @abstract\r\n     * @param {number} position X-Offset of progress position in pixels\r\n     */\r\n    updateProgress(position) {}\r\n}\r\n","import Drawer from './drawer';\r\nimport * as util from './util';\r\nimport CanvasEntry from './drawer.canvasentry';\r\n\r\n/**\r\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\r\n * builtin renderer.\r\n *\r\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\r\n * on the zoom level.\r\n */\r\nexport default class MultiCanvas extends Drawer {\r\n    /**\r\n     * @param {HTMLElement} container The container node of the wavesurfer instance\r\n     * @param {WavesurferParams} params The wavesurfer initialisation options\r\n     */\r\n    constructor(container, params) {\r\n        super(container, params);\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        this.maxCanvasWidth = params.maxCanvasWidth;\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        this.maxCanvasElementWidth = Math.round(\r\n            params.maxCanvasWidth / params.pixelRatio\r\n        );\r\n\r\n        /**\r\n         * Whether or not the progress wave is rendered. If the `waveColor`\r\n         * and `progressColor` are the same color it is not.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        this.halfPixel = 0.5 / params.pixelRatio;\r\n\r\n        /**\r\n         * List of `CanvasEntry` instances.\r\n         *\r\n         * @type {Array}\r\n         */\r\n        this.canvases = [];\r\n\r\n        /**\r\n         * @type {HTMLElement}\r\n         */\r\n        this.progressWave = null;\r\n\r\n        /**\r\n         * Class used to generate entries.\r\n         *\r\n         * @type {function}\r\n         */\r\n        this.EntryClass = CanvasEntry;\r\n\r\n        /**\r\n         * Canvas 2d context attributes.\r\n         *\r\n         * @type {object}\r\n         */\r\n        this.canvasContextAttributes = params.drawingContextAttributes;\r\n\r\n        /**\r\n         * Overlap added between entries to prevent vertical white stripes\r\n         * between `canvas` elements.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\r\n\r\n        /**\r\n         * The radius of the wave bars. Makes bars rounded\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.barRadius = params.barRadius || 0;\r\n    }\r\n\r\n    /**\r\n     * Initialize the drawer\r\n     */\r\n    init() {\r\n        this.createWrapper();\r\n        this.createElements();\r\n    }\r\n\r\n    /**\r\n     * Create the canvas elements and style them\r\n     *\r\n     */\r\n    createElements() {\r\n        this.progressWave = this.wrapper.appendChild(\r\n            this.style(document.createElement('wave'), {\r\n                position: 'absolute',\r\n                zIndex: 3,\r\n                left: 0,\r\n                top: 0,\r\n                bottom: 0,\r\n                overflow: 'hidden',\r\n                width: '0',\r\n                display: 'none',\r\n                boxSizing: 'border-box',\r\n                borderRightStyle: 'solid',\r\n                pointerEvents: 'none'\r\n            })\r\n        );\r\n\r\n        this.addCanvas();\r\n        this.updateCursor();\r\n    }\r\n\r\n    /**\r\n     * Update cursor style\r\n     */\r\n    updateCursor() {\r\n        this.style(this.progressWave, {\r\n            borderRightWidth: this.params.cursorWidth + 'px',\r\n            borderRightColor: this.params.cursorColor\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adjust to the updated size by adding or removing canvases\r\n     */\r\n    updateSize() {\r\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\r\n        const requiredCanvases = Math.ceil(\r\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\r\n        );\r\n\r\n        // add required canvases\r\n        while (this.canvases.length < requiredCanvases) {\r\n            this.addCanvas();\r\n        }\r\n\r\n        // remove older existing canvases, if any\r\n        while (this.canvases.length > requiredCanvases) {\r\n            this.removeCanvas();\r\n        }\r\n\r\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\r\n        const lastCanvas = this.canvases.length - 1;\r\n        this.canvases.forEach((entry, i) => {\r\n            if (i == lastCanvas) {\r\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\r\n            }\r\n            this.updateDimensions(entry, canvasWidth, this.height);\r\n\r\n            entry.clearWave();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add a canvas to the canvas list\r\n     *\r\n     */\r\n    addCanvas() {\r\n        const entry = new this.EntryClass();\r\n        entry.canvasContextAttributes = this.canvasContextAttributes;\r\n        entry.hasProgressCanvas = this.hasProgressCanvas;\r\n        entry.halfPixel = this.halfPixel;\r\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\r\n\r\n        // wave\r\n        entry.initWave(\r\n            this.wrapper.appendChild(\r\n                this.style(document.createElement('canvas'), {\r\n                    position: 'absolute',\r\n                    zIndex: 2,\r\n                    left: leftOffset + 'px',\r\n                    top: 0,\r\n                    bottom: 0,\r\n                    height: '100%',\r\n                    pointerEvents: 'none'\r\n                })\r\n            )\r\n        );\r\n\r\n        // progress\r\n        if (this.hasProgressCanvas) {\r\n            entry.initProgress(\r\n                this.progressWave.appendChild(\r\n                    this.style(document.createElement('canvas'), {\r\n                        position: 'absolute',\r\n                        left: leftOffset + 'px',\r\n                        top: 0,\r\n                        bottom: 0,\r\n                        height: '100%'\r\n                    })\r\n                )\r\n            );\r\n        }\r\n\r\n        this.canvases.push(entry);\r\n    }\r\n\r\n    /**\r\n     * Pop single canvas from the list\r\n     *\r\n     */\r\n    removeCanvas() {\r\n        let lastEntry = this.canvases[this.canvases.length - 1];\r\n\r\n        // wave\r\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave);\r\n\r\n        // progress\r\n        if (this.hasProgressCanvas) {\r\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress);\r\n        }\r\n\r\n        // cleanup\r\n        if (lastEntry) {\r\n            lastEntry.destroy();\r\n            lastEntry = null;\r\n        }\r\n\r\n        this.canvases.pop();\r\n    }\r\n\r\n    /**\r\n     * Update the dimensions of a canvas element\r\n     *\r\n     * @param {CanvasEntry} entry Target entry\r\n     * @param {number} width The new width of the element\r\n     * @param {number} height The new height of the element\r\n     */\r\n    updateDimensions(entry, width, height) {\r\n        const elementWidth = Math.round(width / this.params.pixelRatio);\r\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\r\n\r\n        // update canvas dimensions\r\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\r\n\r\n        // style element\r\n        this.style(this.progressWave, { display: 'block' });\r\n    }\r\n\r\n    /**\r\n     * Clear the whole multi-canvas\r\n     */\r\n    clearWave() {\r\n        util.frame(() => {\r\n            this.canvases.forEach(entry => entry.clearWave());\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * Draw a waveform with bars\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\r\n     * for split channel rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0. Must be an integer.\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     * @returns {void}\r\n     */\r\n    drawBars(peaks, channelIndex, start, end) {\r\n        return this.prepareDraw(\r\n            peaks,\r\n            channelIndex,\r\n            start,\r\n            end,\r\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex: ch }) => {\r\n                // if drawBars was called within ws.empty we don't pass a start and\r\n                // don't want anything to happen\r\n                if (start === undefined) {\r\n                    return;\r\n                }\r\n                // Skip every other value if there are negatives.\r\n                const peakIndexScale = hasMinVals ? 2 : 1;\r\n                const length = peaks.length / peakIndexScale;\r\n                const bar = this.params.barWidth * this.params.pixelRatio;\r\n                const gap =\r\n                    this.params.barGap === null\r\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\r\n                        : Math.max(\r\n                            this.params.pixelRatio,\r\n                            this.params.barGap * this.params.pixelRatio\r\n                        );\r\n                const step = bar + gap;\r\n\r\n                const scale = length / this.width;\r\n                const first = start;\r\n                const last = end;\r\n                let i = first;\r\n\r\n                for (i; i < last; i += step) {\r\n                    const peak =\r\n                        peaks[Math.floor(i * scale * peakIndexScale)] || 0;\r\n                    let h = Math.round((peak / absmax) * halfH);\r\n\r\n                    /* in case of silences, allow the user to specify that we\r\n                     * always draw *something* (normally a 1px high bar) */\r\n                    if (h == 0 && this.params.barMinHeight)\r\n                        h = this.params.barMinHeight;\r\n\r\n                    this.fillRect(\r\n                        i + this.halfPixel,\r\n                        halfH - h + offsetY,\r\n                        bar + this.halfPixel,\r\n                        h * 2,\r\n                        this.barRadius,\r\n                        ch\r\n                    );\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Draw a waveform\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\r\n     * for split channel rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number?} start The x-offset of the beginning of the area that\r\n     * should be rendered (If this isn't set only a flat line is rendered)\r\n     * @param {number?} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     * @returns {void}\r\n     */\r\n    drawWave(peaks, channelIndex, start, end) {\r\n        return this.prepareDraw(\r\n            peaks,\r\n            channelIndex,\r\n            start,\r\n            end,\r\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex }) => {\r\n                if (!hasMinVals) {\r\n                    const reflectedPeaks = [];\r\n                    const len = peaks.length;\r\n                    let i = 0;\r\n                    for (i; i < len; i++) {\r\n                        reflectedPeaks[2 * i] = peaks[i];\r\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\r\n                    }\r\n                    peaks = reflectedPeaks;\r\n                }\r\n\r\n                // if drawWave was called within ws.empty we don't pass a start and\r\n                // end and simply want a flat line\r\n                if (start !== undefined) {\r\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\r\n                }\r\n\r\n                // always draw a median line\r\n                this.fillRect(\r\n                    0,\r\n                    halfH + offsetY - this.halfPixel,\r\n                    this.width,\r\n                    this.halfPixel,\r\n                    this.barRadius,\r\n                    channelIndex\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Tell the canvas entries to render their portion of the waveform\r\n     *\r\n     * @param {number[]} peaks Peaks data\r\n     * @param {number} absmax Maximum peak value (absolute)\r\n     * @param {number} halfH Half the height of the waveform\r\n     * @param {number} offsetY Offset to the top\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that\r\n     * should be rendered\r\n     * @param {channelIndex} channelIndex The channel index of the line drawn\r\n     */\r\n    drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\r\n        const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\r\n        this.canvases.forEach((entry, i) => {\r\n            this.setFillStyles(entry, waveColor, progressColor);\r\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Draw a rectangle on the multi-canvas\r\n     *\r\n     * @param {number} x X-position of the rectangle\r\n     * @param {number} y Y-position of the rectangle\r\n     * @param {number} width Width of the rectangle\r\n     * @param {number} height Height of the rectangle\r\n     * @param {number} radius Radius of the rectangle\r\n     * @param {channelIndex} channelIndex The channel index of the bar drawn\r\n     */\r\n    fillRect(x, y, width, height, radius, channelIndex) {\r\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\r\n        const endCanvas = Math.min(\r\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\r\n            this.canvases.length\r\n        );\r\n        let i = startCanvas;\r\n        for (i; i < endCanvas; i++) {\r\n            const entry = this.canvases[i];\r\n            const leftOffset = i * this.maxCanvasWidth;\r\n\r\n            const intersection = {\r\n                x1: Math.max(x, i * this.maxCanvasWidth),\r\n                y1: y,\r\n                x2: Math.min(\r\n                    x + width,\r\n                    i * this.maxCanvasWidth + entry.wave.width\r\n                ),\r\n                y2: y + height\r\n            };\r\n\r\n            if (intersection.x1 < intersection.x2) {\r\n                const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\r\n                this.setFillStyles(entry, waveColor, progressColor);\r\n\r\n                entry.fillRects(\r\n                    intersection.x1 - leftOffset,\r\n                    intersection.y1,\r\n                    intersection.x2 - intersection.x1,\r\n                    intersection.y2 - intersection.y1,\r\n                    radius\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether to hide the channel from being drawn based on params.\r\n     *\r\n     * @param {number} channelIndex The index of the current channel.\r\n     * @returns {bool} True to hide the channel, false to draw.\r\n     */\r\n    hideChannel(channelIndex) {\r\n        return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\r\n    }\r\n\r\n    /**\r\n     * Performs preparation tasks and calculations which are shared by `drawBars`\r\n     * and `drawWave`\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\r\n     * split channel rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number?} start The x-offset of the beginning of the area that\r\n     * should be rendered. If this isn't set only a flat line is rendered\r\n     * @param {number?} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     * @param {function} fn The render function to call, e.g. `drawWave`\r\n     * @param {number} drawIndex The index of the current channel after filtering.\r\n     * @param {number?} normalizedMax Maximum modulation value across channels for use with relativeNormalization. Ignored when undefined\r\n     * @returns {void}\r\n     */\r\n    prepareDraw(peaks, channelIndex, start, end, fn, drawIndex, normalizedMax) {\r\n        return util.frame(() => {\r\n            // Split channels and call this function with the channelIndex set\r\n            if (peaks[0] instanceof Array) {\r\n                const channels = peaks;\r\n\r\n                if (this.params.splitChannels) {\r\n                    const filteredChannels = channels.filter((c, i) => !this.hideChannel(i));\r\n                    if (!this.params.splitChannelsOptions.overlay) {\r\n                        this.setHeight(\r\n                            Math.max(filteredChannels.length, 1) *\r\n                                this.params.height *\r\n                                this.params.pixelRatio\r\n                        );\r\n                    }\r\n\r\n                    let overallAbsMax;\r\n                    if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.relativeNormalization) {\r\n                        // calculate maximum peak across channels to use for normalization\r\n                        overallAbsMax = util.max(channels.map((channelPeaks => util.absMax(channelPeaks))));\r\n                    }\r\n\r\n\r\n                    return channels.forEach((channelPeaks, i) =>\r\n                        this.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks), overallAbsMax)\r\n                    );\r\n                }\r\n                peaks = channels[0];\r\n            }\r\n\r\n            // Return and do not draw channel peaks if hidden.\r\n            if (this.hideChannel(channelIndex)) {\r\n                return;\r\n            }\r\n\r\n            // calculate maximum modulation value, either from the barHeight\r\n            // parameter or if normalize=true from the largest value in the peak\r\n            // set\r\n            let absmax = 1 / this.params.barHeight;\r\n            if (this.params.normalize) {\r\n                absmax = normalizedMax === undefined ? util.absMax(peaks) : normalizedMax;\r\n            }\r\n\r\n            // Bar wave draws the bottom only as a reflection of the top,\r\n            // so we don't need negative values\r\n            const hasMinVals = [].some.call(peaks, val => val < 0);\r\n            const height = this.params.height * this.params.pixelRatio;\r\n            const offsetY = height * drawIndex || 0;\r\n            const halfH = height / 2;\r\n\r\n            return fn({\r\n                absmax: absmax,\r\n                hasMinVals: hasMinVals,\r\n                height: height,\r\n                offsetY: offsetY,\r\n                halfH: halfH,\r\n                peaks: peaks,\r\n                channelIndex: channelIndex\r\n            });\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * Set the fill styles for a certain entry (wave and progress)\r\n     *\r\n     * @param {CanvasEntry} entry Target entry\r\n     * @param {string} waveColor Wave color to draw this entry\r\n     * @param {string} progressColor Progress color to draw this entry\r\n     */\r\n    setFillStyles(entry, waveColor = this.params.waveColor, progressColor = this.params.progressColor) {\r\n        entry.setFillStyles(waveColor, progressColor);\r\n    }\r\n\r\n    /**\r\n     * Return image data of the multi-canvas\r\n     *\r\n     * When using a `type` of `'blob'`, this will return a `Promise`.\r\n     *\r\n     * @param {string} format='image/png' An optional value of a format type.\r\n     * @param {number} quality=0.92 An optional value between 0 and 1.\r\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\r\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\r\n     * `type` this returns a single data URL or an array of data URLs,\r\n     * one for each canvas. When using the `'blob'` `type` this returns a\r\n     * `Promise` that resolves with an array of `Blob` instances, one for each\r\n     * canvas.\r\n     */\r\n    getImage(format, quality, type) {\r\n        if (type === 'blob') {\r\n            return Promise.all(\r\n                this.canvases.map(entry => {\r\n                    return entry.getImage(format, quality, type);\r\n                })\r\n            );\r\n        } else if (type === 'dataURL') {\r\n            let images = this.canvases.map(entry =>\r\n                entry.getImage(format, quality, type)\r\n            );\r\n            return images.length > 1 ? images : images[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render the new progress\r\n     *\r\n     * @param {number} position X-offset of progress position in pixels\r\n     */\r\n    updateProgress(position) {\r\n        this.style(this.progressWave, { width: position + 'px' });\r\n    }\r\n}\r\n","import MediaElement from './mediaelement';\r\n\r\n/**\r\n * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\r\n * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\r\n * buffer the entire file in one request, and you still get the filtering and scripting functionality\r\n * of the webaudio API.\r\n * Note that in order to use range requests and prevent buffering, you must provide peak data.\r\n *\r\n * @since 3.2.0\r\n */\r\nexport default class MediaElementWebAudio extends MediaElement {\r\n    /**\r\n     * Construct the backend\r\n     *\r\n     * @param {WavesurferParams} params Wavesurfer parameters\r\n     */\r\n    constructor(params) {\r\n        super(params);\r\n        /** @private */\r\n        this.params = params;\r\n        /** @private */\r\n        this.sourceMediaElement = null;\r\n    }\r\n\r\n    /**\r\n     * Initialise the backend, called in `wavesurfer.createBackend()`\r\n     */\r\n    init() {\r\n        this.setPlaybackRate(this.params.audioRate);\r\n        this.createTimer();\r\n        this.createVolumeNode();\r\n        this.createScriptNode();\r\n        this.createAnalyserNode();\r\n    }\r\n    /**\r\n     * Private method called by both `load` (from url)\r\n     * and `loadElt` (existing media element) methods.\r\n     *\r\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\r\n     * @param {string} preload HTML 5 preload attribute value\r\n     * @private\r\n     */\r\n    _load(media, peaks, preload) {\r\n        super._load(media, peaks, preload);\r\n        this.createMediaElementSource(media);\r\n    }\r\n\r\n    /**\r\n     * Create MediaElementSource node\r\n     *\r\n     * @since 3.2.0\r\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\r\n     */\r\n    createMediaElementSource(mediaElement) {\r\n        this.sourceMediaElement = this.ac.createMediaElementSource(\r\n            mediaElement\r\n        );\r\n        this.sourceMediaElement.connect(this.analyser);\r\n    }\r\n\r\n    play(start, end) {\r\n        this.resumeAudioContext();\r\n        return super.play(start, end);\r\n    }\r\n\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     *\r\n     */\r\n    destroy() {\r\n        super.destroy();\r\n\r\n        this.destroyWebAudio();\r\n    }\r\n}\r\n","import WebAudio from './webaudio';\r\nimport * as util from './util';\r\n\r\n/**\r\n * MediaElement backend\r\n */\r\nexport default class MediaElement extends WebAudio {\r\n    /**\r\n     * Construct the backend\r\n     *\r\n     * @param {WavesurferParams} params Wavesurfer parameters\r\n     */\r\n    constructor(params) {\r\n        super(params);\r\n        /** @private */\r\n        this.params = params;\r\n\r\n        /**\r\n         * Initially a dummy media element to catch errors. Once `_load` is\r\n         * called, this will contain the actual `HTMLMediaElement`.\r\n         * @private\r\n         */\r\n        this.media = {\r\n            currentTime: 0,\r\n            duration: 0,\r\n            paused: true,\r\n            playbackRate: 1,\r\n            play() {},\r\n            pause() {},\r\n            volume: 0\r\n        };\r\n\r\n        /** @private */\r\n        this.mediaType = params.mediaType.toLowerCase();\r\n        /** @private */\r\n        this.elementPosition = params.elementPosition;\r\n        /** @private */\r\n        this.peaks = null;\r\n        /** @private */\r\n        this.playbackRate = 1;\r\n        /** @private */\r\n        this.volume = 1;\r\n        /** @private */\r\n        this.isMuted = false;\r\n        /** @private */\r\n        this.buffer = null;\r\n        /** @private */\r\n        this.onPlayEnd = null;\r\n        /** @private */\r\n        this.mediaListeners = {};\r\n    }\r\n\r\n    /**\r\n     * Initialise the backend, called in `wavesurfer.createBackend()`\r\n     */\r\n    init() {\r\n        this.setPlaybackRate(this.params.audioRate);\r\n        this.createTimer();\r\n    }\r\n\r\n    /**\r\n     * Attach event listeners to media element.\r\n     */\r\n    _setupMediaListeners() {\r\n        this.mediaListeners.error = () => {\r\n            this.fireEvent('error', 'Error loading media element');\r\n        };\r\n        this.mediaListeners.canplay = () => {\r\n            this.fireEvent('canplay');\r\n        };\r\n        this.mediaListeners.ended = () => {\r\n            this.fireEvent('finish');\r\n        };\r\n        // listen to and relay play, pause and seeked events to enable\r\n        // playback control from the external media element\r\n        this.mediaListeners.play = () => {\r\n            this.fireEvent('play');\r\n        };\r\n        this.mediaListeners.pause = () => {\r\n            this.fireEvent('pause');\r\n        };\r\n        this.mediaListeners.seeked = event => {\r\n            this.fireEvent('seek');\r\n        };\r\n        this.mediaListeners.volumechange = event => {\r\n            this.isMuted = this.media.muted;\r\n            if (this.isMuted) {\r\n                this.volume = 0;\r\n            } else {\r\n                this.volume = this.media.volume;\r\n            }\r\n            this.fireEvent('volume');\r\n        };\r\n\r\n        // reset event listeners\r\n        Object.keys(this.mediaListeners).forEach(id => {\r\n            this.media.removeEventListener(id, this.mediaListeners[id]);\r\n            this.media.addEventListener(id, this.mediaListeners[id]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create a timer to provide a more precise `audioprocess` event.\r\n     */\r\n    createTimer() {\r\n        const onAudioProcess = () => {\r\n            if (this.isPaused()) {\r\n                return;\r\n            }\r\n            this.fireEvent('audioprocess', this.getCurrentTime());\r\n\r\n            // Call again in the next frame\r\n            util.frame(onAudioProcess)();\r\n        };\r\n\r\n        this.on('play', onAudioProcess);\r\n\r\n        // Update the progress one more time to prevent it from being stuck in\r\n        // case of lower framerates\r\n        this.on('pause', () => {\r\n            this.fireEvent('audioprocess', this.getCurrentTime());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create media element with url as its source,\r\n     * and append to container element.\r\n     *\r\n     * @param {string} url Path to media file\r\n     * @param {HTMLElement} container HTML element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\r\n     * @param {string} preload HTML 5 preload attribute value\r\n     * @throws Will throw an error if the `url` argument is not a valid media\r\n     * element.\r\n     */\r\n    load(url, container, peaks, preload) {\r\n        const media = document.createElement(this.mediaType);\r\n        media.controls = this.params.mediaControls;\r\n        media.autoplay = this.params.autoplay || false;\r\n        media.preload = preload == null ? 'auto' : preload;\r\n        media.src = url;\r\n        media.style.width = '100%';\r\n\r\n        const prevMedia = container.querySelector(this.mediaType);\r\n        if (prevMedia) {\r\n            container.removeChild(prevMedia);\r\n        }\r\n        container.appendChild(media);\r\n\r\n        this._load(media, peaks, preload);\r\n    }\r\n\r\n    /**\r\n     * Load existing media element.\r\n     *\r\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\r\n     */\r\n    loadElt(elt, peaks) {\r\n        elt.controls = this.params.mediaControls;\r\n        elt.autoplay = this.params.autoplay || false;\r\n\r\n        this._load(elt, peaks, elt.preload);\r\n    }\r\n\r\n    /**\r\n     * Method called by both `load` (from url)\r\n     * and `loadElt` (existing media element) methods.\r\n     *\r\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\r\n     * @param {string} preload HTML 5 preload attribute value\r\n     * @throws Will throw an error if the `media` argument is not a valid media\r\n     * element.\r\n     * @private\r\n     */\r\n    _load(media, peaks, preload) {\r\n        // verify media element is valid\r\n        if (\r\n            !(media instanceof HTMLMediaElement) ||\r\n            typeof media.addEventListener === 'undefined'\r\n        ) {\r\n            throw new Error('media parameter is not a valid media element');\r\n        }\r\n\r\n        // load must be called manually on iOS, otherwise peaks won't draw\r\n        // until a user interaction triggers load --> 'ready' event\r\n        //\r\n        // note that we avoid calling media.load here when given peaks and preload == 'none'\r\n        // as this almost always triggers some browser fetch of the media.\r\n        if (typeof media.load == 'function' && !(peaks && preload == 'none')) {\r\n            // Resets the media element and restarts the media resource. Any\r\n            // pending events are discarded. How much media data is fetched is\r\n            // still affected by the preload attribute.\r\n            media.load();\r\n        }\r\n\r\n        this.media = media;\r\n        this._setupMediaListeners();\r\n        this.peaks = peaks;\r\n        this.onPlayEnd = null;\r\n        this.buffer = null;\r\n        this.isMuted = media.muted;\r\n        this.setPlaybackRate(this.playbackRate);\r\n        this.setVolume(this.volume);\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\r\n     *\r\n     * @return {boolean} Media paused or not\r\n     */\r\n    isPaused() {\r\n        return !this.media || this.media.paused;\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.getDuration()`\r\n     *\r\n     * @return {number} Duration\r\n     */\r\n    getDuration() {\r\n        if (this.explicitDuration) {\r\n            return this.explicitDuration;\r\n        }\r\n        let duration = (this.buffer || this.media).duration;\r\n        if (duration >= Infinity) {\r\n            // streaming audio\r\n            duration = this.media.seekable.end(0);\r\n        }\r\n        return duration;\r\n    }\r\n\r\n    /**\r\n     * Returns the current time in seconds relative to the audio-clip's\r\n     * duration.\r\n     *\r\n     * @return {number} Current time\r\n     */\r\n    getCurrentTime() {\r\n        return this.media && this.media.currentTime;\r\n    }\r\n\r\n    /**\r\n     * Get the position from 0 to 1\r\n     *\r\n     * @return {number} Current position\r\n     */\r\n    getPlayedPercents() {\r\n        return this.getCurrentTime() / this.getDuration() || 0;\r\n    }\r\n\r\n    /**\r\n     * Get the audio source playback rate.\r\n     *\r\n     * @return {number} Playback rate\r\n     */\r\n    getPlaybackRate() {\r\n        return this.playbackRate || this.media.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Set the audio source playback rate.\r\n     *\r\n     * @param {number} value Playback rate\r\n     */\r\n    setPlaybackRate(value) {\r\n        this.playbackRate = value || 1;\r\n        this.media.playbackRate = this.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.seekTo()`\r\n     *\r\n     * @param {number} start Position to start at in seconds\r\n     */\r\n    seekTo(start) {\r\n        if (start != null) {\r\n            this.media.currentTime = start;\r\n        }\r\n        this.clearPlayEnd();\r\n    }\r\n\r\n    /**\r\n     * Plays the loaded audio region.\r\n     *\r\n     * @param {number} start Start offset in seconds, relative to the beginning\r\n     * of a clip.\r\n     * @param {number} end When to stop, relative to the beginning of a clip.\r\n     * @emits MediaElement#play\r\n     * @return {Promise} Result\r\n     */\r\n    play(start, end) {\r\n        this.seekTo(start);\r\n        const promise = this.media.play();\r\n        end && this.setPlayEnd(end);\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Pauses the loaded audio.\r\n     *\r\n     * @emits MediaElement#pause\r\n     * @return {Promise} Result\r\n     */\r\n    pause() {\r\n        let promise;\r\n\r\n        if (this.media) {\r\n            promise = this.media.pause();\r\n        }\r\n        this.clearPlayEnd();\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Set the play end\r\n     *\r\n     * @param {number} end Where to end\r\n     */\r\n    setPlayEnd(end) {\r\n        this.clearPlayEnd();\r\n\r\n        this._onPlayEnd = time => {\r\n            if (time >= end) {\r\n                this.pause();\r\n                this.seekTo(end);\r\n            }\r\n        };\r\n        this.on('audioprocess', this._onPlayEnd);\r\n    }\r\n\r\n    /** @private */\r\n    clearPlayEnd() {\r\n        if (this._onPlayEnd) {\r\n            this.un('audioprocess', this._onPlayEnd);\r\n            this._onPlayEnd = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute the max and min value of the waveform when broken into\r\n     * <length> subranges.\r\n     *\r\n     * @param {number} length How many subranges to break the waveform into.\r\n     * @param {number} first First sample in the required range.\r\n     * @param {number} last Last sample in the required range.\r\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\r\n     * arrays of peaks consisting of (max, min) values for each subrange.\r\n     */\r\n    getPeaks(length, first, last) {\r\n        if (this.buffer) {\r\n            return super.getPeaks(length, first, last);\r\n        }\r\n        return this.peaks || [];\r\n    }\r\n\r\n    /**\r\n     * Set the sink id for the media player\r\n     *\r\n     * @param {string} deviceId String value representing audio device id.\r\n     * @returns {Promise} A Promise that resolves to `undefined` when there\r\n     * are no errors.\r\n     */\r\n    setSinkId(deviceId) {\r\n        if (deviceId) {\r\n            if (!this.media.setSinkId) {\r\n                return Promise.reject(\r\n                    new Error('setSinkId is not supported in your browser')\r\n                );\r\n            }\r\n            return this.media.setSinkId(deviceId);\r\n        }\r\n\r\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\r\n    }\r\n\r\n    /**\r\n     * Get the current volume\r\n     *\r\n     * @return {number} value A floating point value between 0 and 1.\r\n     */\r\n    getVolume() {\r\n        return this.volume;\r\n    }\r\n\r\n    /**\r\n     * Set the audio volume\r\n     *\r\n     * @param {number} value A floating point value between 0 and 1.\r\n     */\r\n    setVolume(value) {\r\n        this.volume = value;\r\n        // no need to change when it's already at that volume\r\n        if (this.media.volume !== this.volume) {\r\n            this.media.volume = this.volume;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable muted audio\r\n     *\r\n     * @since 4.0.0\r\n     * @param {boolean} muted Specify `true` to mute audio.\r\n     */\r\n    setMute(muted) {\r\n        // This causes a volume change to be emitted too through the\r\n        // volumechange event listener.\r\n        this.isMuted = this.media.muted = muted;\r\n    }\r\n\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     *\r\n     */\r\n    destroy() {\r\n        this.pause();\r\n        this.unAll();\r\n        this.destroyed = true;\r\n\r\n        // cleanup media event listeners\r\n        Object.keys(this.mediaListeners).forEach(id => {\r\n            if (this.media) {\r\n                this.media.removeEventListener(id, this.mediaListeners[id]);\r\n            }\r\n        });\r\n\r\n        if (\r\n            this.params.removeMediaElementOnDestroy &&\r\n            this.media &&\r\n            this.media.parentNode\r\n        ) {\r\n            this.media.parentNode.removeChild(this.media);\r\n        }\r\n\r\n        this.media = null;\r\n    }\r\n}\r\n","/**\r\n * Caches the decoded peaks data to improve rendering speed for large audio\r\n *\r\n * Is used if the option parameter `partialRender` is set to `true`\r\n */\r\nexport default class PeakCache {\r\n    /**\r\n     * Instantiate cache\r\n     */\r\n    constructor() {\r\n        this.clearPeakCache();\r\n    }\r\n\r\n    /**\r\n     * Empty the cache\r\n     */\r\n    clearPeakCache() {\r\n        /**\r\n         * Flat array with entries that are always in pairs to mark the\r\n         * beginning and end of each subrange.  This is a convenience so we can\r\n         * iterate over the pairs for easy set difference operations.\r\n         * @private\r\n         */\r\n        this.peakCacheRanges = [];\r\n        /**\r\n         * Length of the entire cachable region, used for resetting the cache\r\n         * when this changes (zoom events, for instance).\r\n         * @private\r\n         */\r\n        this.peakCacheLength = -1;\r\n    }\r\n\r\n    /**\r\n     * Add a range of peaks to the cache\r\n     *\r\n     * @param {number} length The length of the range\r\n     * @param {number} start The x offset of the start of the range\r\n     * @param {number} end The x offset of the end of the range\r\n     * @return {Number.<Array[]>} Array with arrays of numbers\r\n     */\r\n    addRangeToPeakCache(length, start, end) {\r\n        if (length != this.peakCacheLength) {\r\n            this.clearPeakCache();\r\n            this.peakCacheLength = length;\r\n        }\r\n\r\n        // Return ranges that weren't in the cache before the call.\r\n        let uncachedRanges = [];\r\n        let i = 0;\r\n        // Skip ranges before the current start.\r\n        while (\r\n            i < this.peakCacheRanges.length &&\r\n            this.peakCacheRanges[i] < start\r\n        ) {\r\n            i++;\r\n        }\r\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\r\n        // |start| falls between an existing range, and the uncached region\r\n        // starts when we encounter the next node in |peakCacheRanges| or\r\n        // |end|, whichever comes first.\r\n        if (i % 2 == 0) {\r\n            uncachedRanges.push(start);\r\n        }\r\n        while (\r\n            i < this.peakCacheRanges.length &&\r\n            this.peakCacheRanges[i] <= end\r\n        ) {\r\n            uncachedRanges.push(this.peakCacheRanges[i]);\r\n            i++;\r\n        }\r\n        // If |i| is even, |end| is after all existing ranges.\r\n        if (i % 2 == 0) {\r\n            uncachedRanges.push(end);\r\n        }\r\n\r\n        // Filter out the 0-length ranges.\r\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\r\n            if (pos == 0) {\r\n                return item != arr[pos + 1];\r\n            } else if (pos == arr.length - 1) {\r\n                return item != arr[pos - 1];\r\n            }\r\n            return item != arr[pos - 1] && item != arr[pos + 1];\r\n        });\r\n\r\n        // Merge the two ranges together, uncachedRanges will either contain\r\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\r\n        // duplicates are detected, remove both and extend the range.\r\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\r\n        this.peakCacheRanges = this.peakCacheRanges\r\n            .sort((a, b) => a - b)\r\n            .filter((item, pos, arr) => {\r\n                if (pos == 0) {\r\n                    return item != arr[pos + 1];\r\n                } else if (pos == arr.length - 1) {\r\n                    return item != arr[pos - 1];\r\n                }\r\n                return item != arr[pos - 1] && item != arr[pos + 1];\r\n            });\r\n\r\n        // Push the uncached ranges into an array of arrays for ease of\r\n        // iteration in the functions that call this.\r\n        const uncachedRangePairs = [];\r\n        for (i = 0; i < uncachedRanges.length; i += 2) {\r\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\r\n        }\r\n\r\n        return uncachedRangePairs;\r\n    }\r\n\r\n    /**\r\n     * For testing\r\n     *\r\n     * @return {Number.<Array[]>} Array with arrays of numbers\r\n     */\r\n    getCacheRanges() {\r\n        const peakCacheRangePairs = [];\r\n        let i;\r\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\r\n            peakCacheRangePairs.push([\r\n                this.peakCacheRanges[i],\r\n                this.peakCacheRanges[i + 1]\r\n            ]);\r\n        }\r\n        return peakCacheRangePairs;\r\n    }\r\n}\r\n","import utilMax from './max';\r\nimport utilmin from './min';\r\n\r\n/**\r\n * Get the largest absolute value in an array\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n * @example console.log(max([-3, 2, 1]), max([-3, 2, 4])); // logs 3 4\r\n * @since 4.3.0\r\n */\r\nexport default function absMax(values) {\r\n    const max = utilMax(values);\r\n    const min = utilmin(values);\r\n    return -min > max ? -min : max;\r\n}\r\n","/**\r\n * Returns a number limited to the given range.\r\n *\r\n * @param {number} val The number to be limited to a range\r\n * @param {number} min The lower boundary of the limit range\r\n * @param {number} max The upper boundary of the limit range\r\n * @returns {number} A number in the range [min, max]\r\n */\r\nexport default function clamp(val, min, max) {\r\n    return Math.min(Math.max(min, val), max);\r\n}\r\n","/**\r\n * @since 3.0.0\r\n */\r\n\r\nimport Observer from './observer';\r\n\r\nclass ProgressHandler {\r\n    /**\r\n     * Instantiate ProgressHandler\r\n     *\r\n     * @param {Observer} instance The `fetchFile` observer instance.\r\n     * @param {Number} contentLength Content length.\r\n     * @param {Response} response Response object.\r\n     */\r\n    constructor(instance, contentLength, response) {\r\n        this.instance = instance;\r\n        this.instance._reader = response.body.getReader();\r\n\r\n        this.total = parseInt(contentLength, 10);\r\n        this.loaded = 0;\r\n    }\r\n\r\n    /**\r\n     * A method that is called once, immediately after the `ReadableStream``\r\n     * is constructed.\r\n     *\r\n     * @param {ReadableStreamDefaultController} controller Controller instance\r\n     *     used to control the stream.\r\n     */\r\n    start(controller) {\r\n        const read = () => {\r\n            // instance._reader.read() returns a promise that resolves\r\n            // when a value has been received\r\n            this.instance._reader\r\n                .read()\r\n                .then(({ done, value }) => {\r\n                    // result objects contain two properties:\r\n                    // done  - true if the stream has already given you all its data.\r\n                    // value - some data. Always undefined when done is true.\r\n                    if (done) {\r\n                        // ensure onProgress called when content-length=0\r\n                        if (this.total === 0) {\r\n                            this.instance.onProgress.call(this.instance, {\r\n                                loaded: this.loaded,\r\n                                total: this.total,\r\n                                lengthComputable: false\r\n                            });\r\n                        }\r\n                        // no more data needs to be consumed, close the stream\r\n                        controller.close();\r\n                        return;\r\n                    }\r\n\r\n                    this.loaded += value.byteLength;\r\n                    this.instance.onProgress.call(this.instance, {\r\n                        loaded: this.loaded,\r\n                        total: this.total,\r\n                        lengthComputable: !(this.total === 0)\r\n                    });\r\n                    // enqueue the next data chunk into our target stream\r\n                    controller.enqueue(value);\r\n                    read();\r\n                })\r\n                .catch(error => {\r\n                    controller.error(error);\r\n                });\r\n        };\r\n\r\n        read();\r\n    }\r\n}\r\n\r\n/**\r\n * Load a file using `fetch`.\r\n *\r\n * @param {object} options Request options to use. See example below.\r\n * @returns {Observer} Observer instance\r\n * @example\r\n * // default options\r\n * let options = {\r\n *     url: undefined,\r\n *     method: 'GET',\r\n *     mode: 'cors',\r\n *     credentials: 'same-origin',\r\n *     cache: 'default',\r\n *     responseType: 'json',\r\n *     requestHeaders: [],\r\n *     redirect: 'follow',\r\n *     referrer: 'client'\r\n * };\r\n *\r\n * // override some options\r\n * options.url = '../media/demo.wav';\r\n\r\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\r\n * options.responseType = 'arraybuffer';\r\n *\r\n * // make fetch call\r\n * let request = util.fetchFile(options);\r\n *\r\n * // listen for events\r\n * request.on('progress', e => {\r\n *     console.log('progress', e);\r\n * });\r\n *\r\n * request.on('success', data => {\r\n *     console.log('success!', data);\r\n * });\r\n *\r\n * request.on('error', e => {\r\n *     console.warn('fetchFile error: ', e);\r\n * });\r\n */\r\nexport default function fetchFile(options) {\r\n    if (!options) {\r\n        throw new Error('fetch options missing');\r\n    } else if (!options.url) {\r\n        throw new Error('fetch url missing');\r\n    }\r\n    const instance = new Observer();\r\n    const fetchHeaders = new Headers();\r\n    const fetchRequest = new Request(options.url);\r\n\r\n    // add ability to abort\r\n    instance.controller = new AbortController();\r\n\r\n    // check if headers have to be added\r\n    if (options && options.requestHeaders) {\r\n        // add custom request headers\r\n        options.requestHeaders.forEach(header => {\r\n            fetchHeaders.append(header.key, header.value);\r\n        });\r\n    }\r\n\r\n    // parse fetch options\r\n    const responseType = options.responseType || 'json';\r\n    const fetchOptions = {\r\n        method: options.method || 'GET',\r\n        headers: fetchHeaders,\r\n        mode: options.mode || 'cors',\r\n        credentials: options.credentials || 'same-origin',\r\n        cache: options.cache || 'default',\r\n        redirect: options.redirect || 'follow',\r\n        referrer: options.referrer || 'client',\r\n        signal: instance.controller.signal\r\n    };\r\n\r\n    fetch(fetchRequest, fetchOptions)\r\n        .then(response => {\r\n            // store response reference\r\n            instance.response = response;\r\n\r\n            let progressAvailable = true;\r\n            if (!response.body) {\r\n                // ReadableStream is not yet supported in this browser\r\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\r\n                progressAvailable = false;\r\n            }\r\n\r\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\r\n            const contentLength = response.headers.get('content-length');\r\n            if (contentLength === null) {\r\n                // Content-Length server response header missing.\r\n                // Don't evaluate download progress if we can't compare against a total size\r\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\r\n                progressAvailable = false;\r\n            }\r\n\r\n            if (!progressAvailable) {\r\n                // not able to check download progress so skip it\r\n                return response;\r\n            }\r\n\r\n            // fire progress event when during load\r\n            instance.onProgress = e => {\r\n                instance.fireEvent('progress', e);\r\n            };\r\n\r\n            return new Response(\r\n                new ReadableStream(\r\n                    new ProgressHandler(instance, contentLength, response)\r\n                ),\r\n                fetchOptions\r\n            );\r\n        })\r\n        .then(response => {\r\n            let errMsg;\r\n            if (response.ok) {\r\n                switch (responseType) {\r\n                    case 'arraybuffer':\r\n                        return response.arrayBuffer();\r\n\r\n                    case 'json':\r\n                        return response.json();\r\n\r\n                    case 'blob':\r\n                        return response.blob();\r\n\r\n                    case 'text':\r\n                        return response.text();\r\n\r\n                    default:\r\n                        errMsg = 'Unknown responseType: ' + responseType;\r\n                        break;\r\n                }\r\n            }\r\n            if (!errMsg) {\r\n                errMsg = 'HTTP error status: ' + response.status;\r\n            }\r\n            throw new Error(errMsg);\r\n        })\r\n        .then(response => {\r\n            instance.fireEvent('success', response);\r\n        })\r\n        .catch(error => {\r\n            instance.fireEvent('error', error);\r\n        });\r\n\r\n    // return the fetch request\r\n    instance.fetchRequest = fetchRequest;\r\n    return instance;\r\n}\r\n","import reqAnimationFrame from './request-animation-frame';\r\n\r\n/**\r\n * Create a function which will be called at the next requestAnimationFrame\r\n * cycle\r\n *\r\n * @param {function} func The function to call\r\n *\r\n * @return {func} The function wrapped within a requestAnimationFrame\r\n */\r\nexport default function frame(func) {\r\n    return (...args) => reqAnimationFrame(() => func(...args));\r\n}\r\n","/**\r\n * Get a random prefixed ID\r\n *\r\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\r\n * @returns {String} Random prefixed ID\r\n * @example\r\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\r\n *\r\n * let prefix = 'foo-';\r\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\r\n */\r\nexport default function getId(prefix) {\r\n    if (prefix === undefined) {\r\n        prefix = 'wavesurfer_';\r\n    }\r\n    return (\r\n        prefix +\r\n        Math.random()\r\n            .toString(32)\r\n            .substring(2)\r\n    );\r\n}\r\n","export { default as getId } from './get-id';\r\nexport { default as max } from './max';\r\nexport { default as min } from './min';\r\nexport { default as absMax } from './absMax';\r\nexport { default as Observer } from './observer';\r\nexport { default as style } from './style';\r\nexport { default as requestAnimationFrame } from './request-animation-frame';\r\nexport { default as frame } from './frame';\r\nexport { default as debounce } from 'debounce';\r\nexport { default as preventClick } from './prevent-click';\r\nexport { default as fetchFile } from './fetch';\r\nexport { default as clamp } from './clamp';\r\n","/**\r\n * Get the largest value\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n * @example console.log(max([1, 2, 3])); // logs 3\r\n */\r\nexport default function max(values) {\r\n    let largest = -Infinity;\r\n    Object.keys(values).forEach(i => {\r\n        if (values[i] > largest) {\r\n            largest = values[i];\r\n        }\r\n    });\r\n    return largest;\r\n}\r\n","/**\r\n * Get the smallest value\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Smallest number found\r\n * @example console.log(min([1, 2, 3])); // logs 1\r\n */\r\nexport default function min(values) {\r\n    let smallest = Number(Infinity);\r\n    Object.keys(values).forEach(i => {\r\n        if (values[i] < smallest) {\r\n            smallest = values[i];\r\n        }\r\n    });\r\n    return smallest;\r\n}\r\n","/**\r\n * @typedef {Object} ListenerDescriptor\r\n * @property {string} name The name of the event\r\n * @property {function} callback The callback\r\n * @property {function} un The function to call to remove the listener\r\n */\r\n\r\n/**\r\n * Observer class\r\n */\r\nexport default class Observer {\r\n    /**\r\n     * Instantiate Observer\r\n     */\r\n    constructor() {\r\n        /**\r\n         * @private\r\n         * @todo Initialise the handlers here already and remove the conditional\r\n         * assignment in `on()`\r\n         */\r\n        this._disabledEventEmissions = [];\r\n        this.handlers = null;\r\n    }\r\n    /**\r\n     * Attach a handler function for an event.\r\n     *\r\n     * @param {string} event Name of the event to listen to\r\n     * @param {function} fn The callback to trigger when the event is fired\r\n     * @return {ListenerDescriptor} The event descriptor\r\n     */\r\n    on(event, fn) {\r\n        if (!this.handlers) {\r\n            this.handlers = {};\r\n        }\r\n\r\n        let handlers = this.handlers[event];\r\n        if (!handlers) {\r\n            handlers = this.handlers[event] = [];\r\n        }\r\n        handlers.push(fn);\r\n\r\n        // Return an event descriptor\r\n        return {\r\n            name: event,\r\n            callback: fn,\r\n            un: (e, fn) => this.un(e, fn)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Remove an event handler.\r\n     *\r\n     * @param {string} event Name of the event the listener that should be\r\n     * removed listens to\r\n     * @param {function} fn The callback that should be removed\r\n     */\r\n    un(event, fn) {\r\n        if (!this.handlers) {\r\n            return;\r\n        }\r\n\r\n        const handlers = this.handlers[event];\r\n        let i;\r\n        if (handlers) {\r\n            if (fn) {\r\n                for (i = handlers.length - 1; i >= 0; i--) {\r\n                    if (handlers[i] == fn) {\r\n                        handlers.splice(i, 1);\r\n                    }\r\n                }\r\n            } else {\r\n                handlers.length = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all event handlers.\r\n     */\r\n    unAll() {\r\n        this.handlers = null;\r\n    }\r\n\r\n    /**\r\n     * Attach a handler to an event. The handler is executed at most once per\r\n     * event type.\r\n     *\r\n     * @param {string} event The event to listen to\r\n     * @param {function} handler The callback that is only to be called once\r\n     * @return {ListenerDescriptor} The event descriptor\r\n     */\r\n    once(event, handler) {\r\n        const fn = (...args) => {\r\n            /*  eslint-disable no-invalid-this */\r\n            handler.apply(this, args);\r\n            /*  eslint-enable no-invalid-this */\r\n            setTimeout(() => {\r\n                this.un(event, fn);\r\n            }, 0);\r\n        };\r\n        return this.on(event, fn);\r\n    }\r\n\r\n    /**\r\n     * Disable firing a list of events by name. When specified, event handlers for any event type\r\n     * passed in here will not be called.\r\n     *\r\n     * @since 4.0.0\r\n     * @param {string[]} eventNames an array of event names to disable emissions for\r\n     * @example\r\n     * // disable seek and interaction events\r\n     * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\r\n     */\r\n    setDisabledEventEmissions(eventNames) {\r\n        this._disabledEventEmissions = eventNames;\r\n    }\r\n\r\n    /**\r\n     * plugins borrow part of this class without calling the constructor,\r\n     * so we have to be careful about _disabledEventEmissions\r\n     */\r\n\r\n    _isDisabledEventEmission(event) {\r\n        return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\r\n    }\r\n\r\n    /**\r\n     * Manually fire an event\r\n     *\r\n     * @param {string} event The event to fire manually\r\n     * @param {...any} args The arguments with which to call the listeners\r\n     */\r\n    fireEvent(event, ...args) {\r\n        if (!this.handlers || this._isDisabledEventEmission(event)) {\r\n            return;\r\n        }\r\n\r\n        const handlers = this.handlers[event];\r\n        handlers &&\r\n            handlers.forEach(fn => {\r\n                fn(...args);\r\n            });\r\n    }\r\n}\r\n","/**\r\n * Stops propagation of click event and removes event listener\r\n *\r\n * @private\r\n * @param {object} event The click event\r\n */\r\nfunction preventClickHandler(event) {\r\n    event.stopPropagation();\r\n    document.body.removeEventListener('click', preventClickHandler, true);\r\n}\r\n\r\n/**\r\n * Starts listening for click event and prevent propagation\r\n *\r\n * @param {object} values Values\r\n */\r\nexport default function preventClick(values) {\r\n    document.body.addEventListener('click', preventClickHandler, true);\r\n}\r\n","/* eslint-disable valid-jsdoc */\r\n/**\r\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\r\n * `setTimeout` if the function is not found\r\n *\r\n * @return {function} Available `requestAnimationFrame` function for the browser\r\n */\r\nexport default (\r\n    window.requestAnimationFrame ||\r\n    window.webkitRequestAnimationFrame ||\r\n    window.mozRequestAnimationFrame ||\r\n    window.oRequestAnimationFrame ||\r\n    window.msRequestAnimationFrame ||\r\n    ((callback, element) => setTimeout(callback, 1000 / 60))\r\n).bind(window);\r\n","/**\r\n * Apply a map of styles to an element\r\n *\r\n * @param {HTMLElement} el The element that the styles will be applied to\r\n * @param {Object} styles The map of propName: attribute, both are used as-is\r\n *\r\n * @return {HTMLElement} el\r\n */\r\nexport default function style(el, styles) {\r\n    Object.keys(styles).forEach(prop => {\r\n        if (el.style[prop] !== styles[prop]) {\r\n            el.style[prop] = styles[prop];\r\n        }\r\n    });\r\n    return el;\r\n}\r\n","import * as util from './util';\r\nimport MultiCanvas from './drawer.multicanvas';\r\nimport WebAudio from './webaudio';\r\nimport MediaElement from './mediaelement';\r\nimport PeakCache from './peakcache';\r\nimport MediaElementWebAudio from './mediaelement-webaudio';\r\n\r\n/*\r\n * This work is licensed under a BSD-3-Clause License.\r\n */\r\n\r\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\r\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\r\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\r\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\r\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\r\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\r\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\r\n\r\n/**\r\n * @typedef {Object} WavesurferParams\r\n * @property {AudioContext} audioContext=null Use your own previously\r\n * initialized AudioContext or leave blank.\r\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\r\n * slower.\r\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\r\n * initialized ScriptProcessorNode or leave blank.\r\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\r\n * waveform on current progress\r\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\r\n * waveform is centered\r\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\r\n * center waveform on current progress\r\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\r\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\r\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\r\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\r\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\r\n * also with audio with big duration. For example:\r\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\r\n *   wavesurfer.play();\r\n *   wavesurfer.setFilter(customFilter);\r\n * `\r\n * @property {string} backgroundColor=null Change background color of the\r\n * waveform container.\r\n * @property {number} barHeight=1 The height of the wave bars.\r\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\r\n * @property {number} barGap=null The optional spacing between bars of the wave,\r\n * if not provided will be calculated in legacy format.\r\n * @property {number} barWidth=null Draw the waveform using bars.\r\n * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\r\n * eliminating waveform gaps\r\n * @property {boolean} closeAudioContext=false Close and nullify all audio\r\n * contexts when the destroy method is called.\r\n * @property {!string|HTMLElement} container CSS selector or HTML element where\r\n * the waveform should be drawn. This is the only required parameter.\r\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\r\n * the playhead position.\r\n * @property {number} cursorWidth=1 Measured in pixels.\r\n * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\r\n * attributes.\r\n * @property {number} duration=null Optional audio length so pre-rendered peaks\r\n * can be display immediately for example.\r\n * @property {boolean} fillParent=true Whether to fill the entire container or\r\n * draw only according to `minPxPerSec`.\r\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\r\n * when zooming to get a more detailed waveform.\r\n * @property {number} height=128 The height of the waveform. Measured in\r\n * pixels.\r\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\r\n * scrollbar when one would normally be shown.\r\n * @property {boolean} interact=true Whether the mouse interaction will be\r\n * enabled at initialization. You can switch this parameter at any time later\r\n * on.\r\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\r\n * looping of selected regions\r\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\r\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\r\n * even integer). If the waveform is longer than this value, additional canvases\r\n * will be used to render the waveform, which is useful for very large waveforms\r\n * that may be too wide for browsers to draw on a single canvas.\r\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\r\n * this enables the native controls for the media element\r\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\r\n * `'audio'|'video'` ('video' only for `MediaElement`)\r\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\r\n * audio.\r\n * @property {boolean} normalize=false If true, normalize by the maximum peak\r\n * instead of 1.0.\r\n * @property {boolean} partialRender=false Use the PeakCache to improve\r\n * rendering speed of large waveforms\r\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\r\n * calculate display\r\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\r\n * register during instantiation, they will be directly initialised unless they\r\n * are added with the `deferInit` property set to true.\r\n * @property {string} progressColor='#555' The fill color of the part of the\r\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\r\n * the progress wave is not rendered at all.\r\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\r\n * media element in the DOM when the player is destroyed. This is useful when\r\n * reusing an existing media element via the `loadMediaElement` method.\r\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\r\n * renderer.\r\n * @property {boolean|number} responsive=false If set to `true` resize the\r\n * waveform, when the window is resized. This is debounced with a `100ms`\r\n * timeout by default. If this parameter is a number it represents that timeout.\r\n * @property {boolean} rtl=false If set to `true`, renders waveform from\r\n * right-to-left.\r\n * @property {boolean} scrollParent=false Whether to scroll the container with a\r\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\r\n * (see fillParent).\r\n * @property {number} skipLength=2 Number of seconds to skip with the\r\n * skipForward() and skipBackward() methods.\r\n * @property {boolean} splitChannels=false Render with separate waveforms for\r\n * the channels of the audio\r\n * @property {SplitChannelOptions} splitChannelsOptions={} Options for splitChannel rendering\r\n * @property {string} waveColor='#999' The fill color of the waveform after the\r\n * cursor.\r\n * @property {object} xhr={} XHR options. For example:\r\n * `let xhr = {\r\n *     cache: 'default',\r\n *     mode: 'cors',\r\n *     method: 'GET',\r\n *     credentials: 'same-origin',\r\n *     redirect: 'follow',\r\n *     referrer: 'client',\r\n *     requestHeaders: [\r\n *         {\r\n *             key: 'Authorization',\r\n *             value: 'my-token'\r\n *         }\r\n *     ]\r\n * };`\r\n */\r\n\r\n/**\r\n * @typedef {Object} PluginDefinition\r\n * @desc The Object used to describe a plugin\r\n * @example wavesurfer.addPlugin(pluginDefinition);\r\n * @property {string} name The name of the plugin, the plugin instance will be\r\n * added as a property to the wavesurfer instance under this name\r\n * @property {?Object} staticProps The properties that should be added to the\r\n * wavesurfer instance as static properties\r\n * @property {?boolean} deferInit Don't initialise plugin\r\n * automatically\r\n * @property {Object} params={} The plugin parameters, they are the first parameter\r\n * passed to the plugin class constructor function\r\n * @property {PluginClass} instance The plugin instance factory, is called with\r\n * the dependency specified in extends. Returns the plugin class.\r\n */\r\n\r\n/**\r\n * @typedef {Object} SplitChannelOptions\r\n * @desc parameters applied when splitChannels option is true\r\n * @property {boolean} overlay=false determines whether channels are rendered on top of each other or on separate tracks\r\n * @property {object} channelColors={} object describing color for each channel. Example:\r\n * {\r\n *     0: {\r\n *         progressColor: 'green',\r\n *         waveColor: 'pink'\r\n *     },\r\n *     1: {\r\n *         progressColor: 'orange',\r\n *         waveColor: 'purple'\r\n *     }\r\n * }\r\n * @property {number[]} filterChannels=[] indexes of channels to be hidden from rendering\r\n * @property {boolean} relativeNormalization=false determines whether\r\n * normalization is done per channel or maintains proportionality between\r\n * channels. Only applied when normalize and splitChannels are both true.\r\n * @since 4.3.0\r\n */\r\n\r\n/**\r\n * @interface PluginClass\r\n *\r\n * @desc This is the interface which is implemented by all plugin classes. Note\r\n * that this only turns into an observer after being passed through\r\n * `wavesurfer.addPlugin`.\r\n *\r\n * @extends {Observer}\r\n */\r\nclass PluginClass {\r\n    /**\r\n     * Plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * It returns a `PluginDefinition` object representing the plugin.\r\n     *\r\n     * @param {Object} params={} The plugin params (specific to the plugin)\r\n     */\r\n    create(params) {}\r\n    /**\r\n     * Construct the plugin\r\n     *\r\n     * @param {Object} params={} The plugin params (specific to the plugin)\r\n     * @param {Object} ws The wavesurfer instance\r\n     */\r\n    constructor(params, ws) {}\r\n    /**\r\n     * Initialise the plugin\r\n     *\r\n     * Start doing something. This is called by\r\n     * `wavesurfer.initPlugin(pluginName)`\r\n     */\r\n    init() {}\r\n    /**\r\n     * Destroy the plugin instance\r\n     *\r\n     * Stop doing something. This is called by\r\n     * `wavesurfer.destroyPlugin(pluginName)`\r\n     */\r\n    destroy() {}\r\n}\r\n\r\n/**\r\n * WaveSurfer core library class\r\n *\r\n * @extends {Observer}\r\n * @example\r\n * const params = {\r\n *   container: '#waveform',\r\n *   waveColor: 'violet',\r\n *   progressColor: 'purple'\r\n * };\r\n *\r\n * // initialise like this\r\n * const wavesurfer = WaveSurfer.create(params);\r\n *\r\n * // or like this ...\r\n * const wavesurfer = new WaveSurfer(params);\r\n * wavesurfer.init();\r\n *\r\n * // load audio file\r\n * wavesurfer.load('example/media/demo.wav');\r\n */\r\nexport default class WaveSurfer extends util.Observer {\r\n    /** @private */\r\n    defaultParams = {\r\n        audioContext: null,\r\n        audioScriptProcessor: null,\r\n        audioRate: 1,\r\n        autoCenter: true,\r\n        autoCenterRate: 5,\r\n        autoCenterImmediately: false,\r\n        backend: 'WebAudio',\r\n        backgroundColor: null,\r\n        barHeight: 1,\r\n        barRadius: 0,\r\n        barGap: null,\r\n        barMinHeight: null,\r\n        container: null,\r\n        cursorColor: '#333',\r\n        cursorWidth: 1,\r\n        dragSelection: true,\r\n        drawingContextAttributes: {\r\n            // Boolean that hints the user agent to reduce the latency\r\n            // by desynchronizing the canvas paint cycle from the event\r\n            // loop\r\n            desynchronized: false\r\n        },\r\n        duration: null,\r\n        fillParent: true,\r\n        forceDecode: false,\r\n        height: 128,\r\n        hideScrollbar: false,\r\n        interact: true,\r\n        loopSelection: true,\r\n        maxCanvasWidth: 4000,\r\n        mediaContainer: null,\r\n        mediaControls: false,\r\n        mediaType: 'audio',\r\n        minPxPerSec: 20,\r\n        normalize: false,\r\n        partialRender: false,\r\n        pixelRatio:\r\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\r\n        plugins: [],\r\n        progressColor: '#555',\r\n        removeMediaElementOnDestroy: true,\r\n        renderer: MultiCanvas,\r\n        responsive: false,\r\n        rtl: false,\r\n        scrollParent: false,\r\n        skipLength: 2,\r\n        splitChannels: false,\r\n        splitChannelsOptions: {\r\n            overlay: false,\r\n            channelColors: {},\r\n            filterChannels: [],\r\n            relativeNormalization: false\r\n        },\r\n        waveColor: '#999',\r\n        xhr: {}\r\n    };\r\n\r\n    /** @private */\r\n    backends = {\r\n        MediaElement,\r\n        WebAudio,\r\n        MediaElementWebAudio\r\n    };\r\n\r\n    /**\r\n     * Instantiate this class, call its `init` function and returns it\r\n     *\r\n     * @param {WavesurferParams} params The wavesurfer parameters\r\n     * @return {Object} WaveSurfer instance\r\n     * @example const wavesurfer = WaveSurfer.create(params);\r\n     */\r\n    static create(params) {\r\n        const wavesurfer = new WaveSurfer(params);\r\n        return wavesurfer.init();\r\n    }\r\n\r\n    /**\r\n     * The library version number is available as a static property of the\r\n     * WaveSurfer class\r\n     *\r\n     * @type {String}\r\n     * @example\r\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\r\n     */\r\n    static VERSION = __VERSION__;\r\n\r\n    /**\r\n     * Functions in the `util` property are available as a prototype property to\r\n     * all instances\r\n     *\r\n     * @type {Object}\r\n     * @example\r\n     * const wavesurfer = WaveSurfer.create(params);\r\n     * wavesurfer.util.style(myElement, { background: 'blue' });\r\n     */\r\n    util = util;\r\n\r\n    /**\r\n     * Functions in the `util` property are available as a static property of the\r\n     * WaveSurfer class\r\n     *\r\n     * @type {Object}\r\n     * @example\r\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\r\n     */\r\n    static util = util;\r\n\r\n    /**\r\n     * Initialise wavesurfer instance\r\n     *\r\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\r\n     * @example\r\n     * const wavesurfer = new WaveSurfer(params);\r\n     * @returns {this} Wavesurfer instance\r\n     */\r\n    constructor(params) {\r\n        super();\r\n        /**\r\n         * Extract relevant parameters (or defaults)\r\n         * @private\r\n         */\r\n        this.params = Object.assign({}, this.defaultParams, params);\r\n        this.params.splitChannelsOptions = Object.assign(\r\n            {},\r\n            this.defaultParams.splitChannelsOptions,\r\n            params.splitChannelsOptions\r\n        );\r\n        /** @private */\r\n        this.container =\r\n            'string' == typeof params.container\r\n                ? document.querySelector(this.params.container)\r\n                : this.params.container;\r\n\r\n        if (!this.container) {\r\n            throw new Error('Container element not found');\r\n        }\r\n\r\n        if (this.params.mediaContainer == null) {\r\n            /** @private */\r\n            this.mediaContainer = this.container;\r\n        } else if (typeof this.params.mediaContainer == 'string') {\r\n            /** @private */\r\n            this.mediaContainer = document.querySelector(\r\n                this.params.mediaContainer\r\n            );\r\n        } else {\r\n            /** @private */\r\n            this.mediaContainer = this.params.mediaContainer;\r\n        }\r\n\r\n        if (!this.mediaContainer) {\r\n            throw new Error('Media Container element not found');\r\n        }\r\n\r\n        if (this.params.maxCanvasWidth <= 1) {\r\n            throw new Error('maxCanvasWidth must be greater than 1');\r\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\r\n            throw new Error('maxCanvasWidth must be an even number');\r\n        }\r\n\r\n        if (this.params.rtl === true) {\r\n            util.style(this.container, { transform: 'rotateY(180deg)' });\r\n        }\r\n\r\n        if (this.params.backgroundColor) {\r\n            this.setBackgroundColor(this.params.backgroundColor);\r\n        }\r\n\r\n        /**\r\n         * @private Used to save the current volume when muting so we can\r\n         * restore once unmuted\r\n         * @type {number}\r\n         */\r\n        this.savedVolume = 0;\r\n\r\n        /**\r\n         * @private The current muted state\r\n         * @type {boolean}\r\n         */\r\n        this.isMuted = false;\r\n\r\n        /**\r\n         * @private Will hold a list of event descriptors that need to be\r\n         * canceled on subsequent loads of audio\r\n         * @type {Object[]}\r\n         */\r\n        this.tmpEvents = [];\r\n\r\n        /**\r\n         * @private Holds any running audio downloads\r\n         * @type {Observer}\r\n         */\r\n        this.currentRequest = null;\r\n        /** @private */\r\n        this.arraybuffer = null;\r\n        /** @private */\r\n        this.drawer = null;\r\n        /** @private */\r\n        this.backend = null;\r\n        /** @private */\r\n        this.peakCache = null;\r\n\r\n        // cache constructor objects\r\n        if (typeof this.params.renderer !== 'function') {\r\n            throw new Error('Renderer parameter is invalid');\r\n        }\r\n        /**\r\n         * @private The uninitialised Drawer class\r\n         */\r\n        this.Drawer = this.params.renderer;\r\n        /**\r\n         * @private The uninitialised Backend class\r\n         */\r\n        // Back compat\r\n        if (this.params.backend == 'AudioElement') {\r\n            this.params.backend = 'MediaElement';\r\n        }\r\n\r\n        if (\r\n            (this.params.backend == 'WebAudio' ||\r\n                this.params.backend === 'MediaElementWebAudio') &&\r\n            !WebAudio.prototype.supportsWebAudio.call(null)\r\n        ) {\r\n            this.params.backend = 'MediaElement';\r\n        }\r\n        this.Backend = this.backends[this.params.backend];\r\n\r\n        /**\r\n         * @private map of plugin names that are currently initialised\r\n         */\r\n        this.initialisedPluginList = {};\r\n        /** @private */\r\n        this.isDestroyed = false;\r\n\r\n        /**\r\n         * Get the current ready status.\r\n         *\r\n         * @example const isReady = wavesurfer.isReady;\r\n         * @return {boolean}\r\n         */\r\n        this.isReady = false;\r\n\r\n        // responsive debounced event listener. If this.params.responsive is not\r\n        // set, this is never called. Use 100ms or this.params.responsive as\r\n        // timeout for the debounce function.\r\n        let prevWidth = 0;\r\n        this._onResize = util.debounce(\r\n            () => {\r\n                if (\r\n                    prevWidth != this.drawer.wrapper.clientWidth &&\r\n                    !this.params.scrollParent\r\n                ) {\r\n                    prevWidth = this.drawer.wrapper.clientWidth;\r\n                    this.drawer.fireEvent('redraw');\r\n                }\r\n            },\r\n            typeof this.params.responsive === 'number'\r\n                ? this.params.responsive\r\n                : 100\r\n        );\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Initialise the wave\r\n     *\r\n     * @example\r\n     * var wavesurfer = new WaveSurfer(params);\r\n     * wavesurfer.init();\r\n     * @return {this} The wavesurfer instance\r\n     */\r\n    init() {\r\n        this.registerPlugins(this.params.plugins);\r\n        this.createDrawer();\r\n        this.createBackend();\r\n        this.createPeakCache();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\r\n     * this function is called in the init function of wavesurfer\r\n     *\r\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\r\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\r\n     * @return {this} The wavesurfer instance\r\n     */\r\n    registerPlugins(plugins) {\r\n        // first instantiate all the plugins\r\n        plugins.forEach(plugin => this.addPlugin(plugin));\r\n\r\n        // now run the init functions\r\n        plugins.forEach(plugin => {\r\n            // call init function of the plugin if deferInit is falsey\r\n            // in that case you would manually use initPlugins()\r\n            if (!plugin.deferInit) {\r\n                this.initPlugin(plugin.name);\r\n            }\r\n        });\r\n        this.fireEvent('plugins-registered', plugins);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get a map of plugin names that are currently initialised\r\n     *\r\n     * @example wavesurfer.getPlugins();\r\n     * @return {Object} Object with plugin names\r\n     */\r\n    getActivePlugins() {\r\n        return this.initialisedPluginList;\r\n    }\r\n\r\n    /**\r\n     * Add a plugin object to wavesurfer\r\n     *\r\n     * @param {PluginDefinition} plugin A plugin definition\r\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\r\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\r\n     * @return {this} The wavesurfer instance\r\n     */\r\n    addPlugin(plugin) {\r\n        if (!plugin.name) {\r\n            throw new Error('Plugin does not have a name!');\r\n        }\r\n        if (!plugin.instance) {\r\n            throw new Error(\r\n                `Plugin ${plugin.name} does not have an instance property!`\r\n            );\r\n        }\r\n\r\n        // staticProps properties are applied to wavesurfer instance\r\n        if (plugin.staticProps) {\r\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\r\n                /**\r\n                 * Properties defined in a plugin definition's `staticProps` property are added as\r\n                 * staticProps properties of the WaveSurfer instance\r\n                 */\r\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\r\n            });\r\n        }\r\n\r\n        const Instance = plugin.instance;\r\n\r\n        // turn the plugin instance into an observer\r\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\r\n            util.Observer.prototype\r\n        );\r\n        observerPrototypeKeys.forEach(key => {\r\n            Instance.prototype[key] = util.Observer.prototype[key];\r\n        });\r\n\r\n        /**\r\n         * Instantiated plugin classes are added as a property of the wavesurfer\r\n         * instance\r\n         * @type {Object}\r\n         */\r\n        this[plugin.name] = new Instance(plugin.params || {}, this);\r\n        this.fireEvent('plugin-added', plugin.name);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Initialise a plugin\r\n     *\r\n     * @param {string} name A plugin name\r\n     * @emits WaveSurfer#plugin-initialised\r\n     * @example wavesurfer.initPlugin('minimap');\r\n     * @return {this} The wavesurfer instance\r\n     */\r\n    initPlugin(name) {\r\n        if (!this[name]) {\r\n            throw new Error(`Plugin ${name} has not been added yet!`);\r\n        }\r\n        if (this.initialisedPluginList[name]) {\r\n            // destroy any already initialised plugins\r\n            this.destroyPlugin(name);\r\n        }\r\n        this[name].init();\r\n        this.initialisedPluginList[name] = true;\r\n        this.fireEvent('plugin-initialised', name);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Destroy a plugin\r\n     *\r\n     * @param {string} name A plugin name\r\n     * @emits WaveSurfer#plugin-destroyed\r\n     * @example wavesurfer.destroyPlugin('minimap');\r\n     * @returns {this} The wavesurfer instance\r\n     */\r\n    destroyPlugin(name) {\r\n        if (!this[name]) {\r\n            throw new Error(\r\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\r\n            );\r\n        }\r\n        if (!this.initialisedPluginList[name]) {\r\n            throw new Error(\r\n                `Plugin ${name} is not active and cannot be destroyed!`\r\n            );\r\n        }\r\n        if (typeof this[name].destroy !== 'function') {\r\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\r\n        }\r\n\r\n        this[name].destroy();\r\n        delete this.initialisedPluginList[name];\r\n        this.fireEvent('plugin-destroyed', name);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Destroy all initialised plugins. Convenience function to use when\r\n     * wavesurfer is removed\r\n     *\r\n     * @private\r\n     */\r\n    destroyAllPlugins() {\r\n        Object.keys(this.initialisedPluginList).forEach(name =>\r\n            this.destroyPlugin(name)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create the drawer and draw the waveform\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#drawer-created\r\n     */\r\n    createDrawer() {\r\n        this.drawer = new this.Drawer(this.container, this.params);\r\n        this.drawer.init();\r\n        this.fireEvent('drawer-created', this.drawer);\r\n\r\n        if (this.params.responsive !== false) {\r\n            window.addEventListener('resize', this._onResize, true);\r\n            window.addEventListener('orientationchange', this._onResize, true);\r\n        }\r\n\r\n        this.drawer.on('redraw', () => {\r\n            this.drawBuffer();\r\n            this.drawer.progress(this.backend.getPlayedPercents());\r\n        });\r\n\r\n        // Click-to-seek\r\n        this.drawer.on('click', (e, progress) => {\r\n            setTimeout(() => this.seekTo(progress), 0);\r\n        });\r\n\r\n        // Relay the scroll event from the drawer\r\n        this.drawer.on('scroll', e => {\r\n            if (this.params.partialRender) {\r\n                this.drawBuffer();\r\n            }\r\n            this.fireEvent('scroll', e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create the backend\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#backend-created\r\n     */\r\n    createBackend() {\r\n        if (this.backend) {\r\n            this.backend.destroy();\r\n        }\r\n\r\n        this.backend = new this.Backend(this.params);\r\n        this.backend.init();\r\n        this.fireEvent('backend-created', this.backend);\r\n\r\n        this.backend.on('finish', () => {\r\n            this.drawer.progress(this.backend.getPlayedPercents());\r\n            this.fireEvent('finish');\r\n        });\r\n        this.backend.on('play', () => this.fireEvent('play'));\r\n        this.backend.on('pause', () => this.fireEvent('pause'));\r\n\r\n        this.backend.on('audioprocess', time => {\r\n            this.drawer.progress(this.backend.getPlayedPercents());\r\n            this.fireEvent('audioprocess', time);\r\n        });\r\n\r\n        // only needed for MediaElement and MediaElementWebAudio backend\r\n        if (\r\n            this.params.backend === 'MediaElement' ||\r\n            this.params.backend === 'MediaElementWebAudio'\r\n        ) {\r\n            this.backend.on('seek', () => {\r\n                this.drawer.progress(this.backend.getPlayedPercents());\r\n            });\r\n\r\n            this.backend.on('volume', () => {\r\n                let newVolume = this.getVolume();\r\n                this.fireEvent('volume', newVolume);\r\n\r\n                if (this.backend.isMuted !== this.isMuted) {\r\n                    this.isMuted = this.backend.isMuted;\r\n                    this.fireEvent('mute', this.isMuted);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the peak cache\r\n     *\r\n     * @private\r\n     */\r\n    createPeakCache() {\r\n        if (this.params.partialRender) {\r\n            this.peakCache = new PeakCache();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the duration of the audio clip\r\n     *\r\n     * @example const duration = wavesurfer.getDuration();\r\n     * @return {number} Duration in seconds\r\n     */\r\n    getDuration() {\r\n        return this.backend.getDuration();\r\n    }\r\n\r\n    /**\r\n     * Get the current playback position\r\n     *\r\n     * @example const currentTime = wavesurfer.getCurrentTime();\r\n     * @return {number} Playback position in seconds\r\n     */\r\n    getCurrentTime() {\r\n        return this.backend.getCurrentTime();\r\n    }\r\n\r\n    /**\r\n     * Set the current play time in seconds.\r\n     *\r\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\r\n     * seconds, 60 means 1 minute\r\n     */\r\n    setCurrentTime(seconds) {\r\n        if (seconds >= this.getDuration()) {\r\n            this.seekTo(1);\r\n        } else {\r\n            this.seekTo(seconds / this.getDuration());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts playback from the current position. Optional start and end\r\n     * measured in seconds can be used to set the range of audio to play.\r\n     *\r\n     * @param {?number} start Position to start at\r\n     * @param {?number} end Position to end at\r\n     * @emits WaveSurfer#interaction\r\n     * @return {Promise} Result of the backend play method\r\n     * @example\r\n     * // play from second 1 to 5\r\n     * wavesurfer.play(1, 5);\r\n     */\r\n    play(start, end) {\r\n        this.fireEvent('interaction', () => this.play(start, end));\r\n        return this.backend.play(start, end);\r\n    }\r\n\r\n    /**\r\n     * Set a point in seconds for playback to stop at.\r\n     *\r\n     * @param {number} position Position (in seconds) to stop at\r\n     * @version 3.3.0\r\n     */\r\n    setPlayEnd(position) {\r\n        this.backend.setPlayEnd(position);\r\n    }\r\n\r\n    /**\r\n     * Stops and pauses playback\r\n     *\r\n     * @example wavesurfer.pause();\r\n     * @return {Promise} Result of the backend pause method\r\n     */\r\n    pause() {\r\n        if (!this.backend.isPaused()) {\r\n            return this.backend.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle playback\r\n     *\r\n     * @example wavesurfer.playPause();\r\n     * @return {Promise} Result of the backend play or pause method\r\n     */\r\n    playPause() {\r\n        return this.backend.isPaused() ? this.play() : this.pause();\r\n    }\r\n\r\n    /**\r\n     * Get the current playback state\r\n     *\r\n     * @example const isPlaying = wavesurfer.isPlaying();\r\n     * @return {boolean} False if paused, true if playing\r\n     */\r\n    isPlaying() {\r\n        return !this.backend.isPaused();\r\n    }\r\n\r\n    /**\r\n     * Skip backward\r\n     *\r\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\r\n     * is used\r\n     * @example wavesurfer.skipBackward();\r\n     */\r\n    skipBackward(seconds) {\r\n        this.skip(-seconds || -this.params.skipLength);\r\n    }\r\n\r\n    /**\r\n     * Skip forward\r\n     *\r\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\r\n     * is used\r\n     * @example wavesurfer.skipForward();\r\n     */\r\n    skipForward(seconds) {\r\n        this.skip(seconds || this.params.skipLength);\r\n    }\r\n\r\n    /**\r\n     * Skip a number of seconds from the current position (use a negative value\r\n     * to go backwards).\r\n     *\r\n     * @param {number} offset Amount to skip back or forwards\r\n     * @example\r\n     * // go back 2 seconds\r\n     * wavesurfer.skip(-2);\r\n     */\r\n    skip(offset) {\r\n        const duration = this.getDuration() || 1;\r\n        let position = this.getCurrentTime() || 0;\r\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\r\n        this.seekAndCenter(position / duration);\r\n    }\r\n\r\n    /**\r\n     * Seeks to a position and centers the view\r\n     *\r\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\r\n     * @example\r\n     * // seek and go to the middle of the audio\r\n     * wavesurfer.seekTo(0.5);\r\n     */\r\n    seekAndCenter(progress) {\r\n        this.seekTo(progress);\r\n        this.drawer.recenter(progress);\r\n    }\r\n\r\n    /**\r\n     * Seeks to a position\r\n     *\r\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\r\n     * @emits WaveSurfer#interaction\r\n     * @emits WaveSurfer#seek\r\n     * @example\r\n     * // seek to the middle of the audio\r\n     * wavesurfer.seekTo(0.5);\r\n     */\r\n    seekTo(progress) {\r\n        // return an error if progress is not a number between 0 and 1\r\n        if (\r\n            typeof progress !== 'number' ||\r\n            !isFinite(progress) ||\r\n            progress < 0 ||\r\n            progress > 1\r\n        ) {\r\n            throw new Error(\r\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\r\n            );\r\n        }\r\n        this.fireEvent('interaction', () => this.seekTo(progress));\r\n\r\n        const isWebAudioBackend = this.params.backend === 'WebAudio';\r\n        const paused = this.backend.isPaused();\r\n\r\n        if (isWebAudioBackend && !paused) {\r\n            this.backend.pause();\r\n        }\r\n\r\n        // avoid small scrolls while paused seeking\r\n        const oldScrollParent = this.params.scrollParent;\r\n        this.params.scrollParent = false;\r\n        this.backend.seekTo(progress * this.getDuration());\r\n        this.drawer.progress(progress);\r\n\r\n        if (isWebAudioBackend && !paused) {\r\n            this.backend.play();\r\n        }\r\n\r\n        this.params.scrollParent = oldScrollParent;\r\n        this.fireEvent('seek', progress);\r\n    }\r\n\r\n    /**\r\n     * Stops and goes to the beginning.\r\n     *\r\n     * @example wavesurfer.stop();\r\n     */\r\n    stop() {\r\n        this.pause();\r\n        this.seekTo(0);\r\n        this.drawer.progress(0);\r\n    }\r\n\r\n    /**\r\n     * Sets the ID of the audio device to use for output and returns a Promise.\r\n     *\r\n     * @param {string} deviceId String value representing underlying output\r\n     * device\r\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\r\n     * no errors detected.\r\n     */\r\n    setSinkId(deviceId) {\r\n        return this.backend.setSinkId(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Set the playback volume.\r\n     *\r\n     * @param {number} newVolume A value between 0 and 1, 0 being no\r\n     * volume and 1 being full volume.\r\n     * @emits WaveSurfer#volume\r\n     */\r\n    setVolume(newVolume) {\r\n        this.backend.setVolume(newVolume);\r\n        this.fireEvent('volume', newVolume);\r\n    }\r\n\r\n    /**\r\n     * Get the playback volume.\r\n     *\r\n     * @return {number} A value between 0 and 1, 0 being no\r\n     * volume and 1 being full volume.\r\n     */\r\n    getVolume() {\r\n        return this.backend.getVolume();\r\n    }\r\n\r\n    /**\r\n     * Set the playback rate.\r\n     *\r\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\r\n     * speed, 2 means double speed and so on.\r\n     * @example wavesurfer.setPlaybackRate(2);\r\n     */\r\n    setPlaybackRate(rate) {\r\n        this.backend.setPlaybackRate(rate);\r\n    }\r\n\r\n    /**\r\n     * Get the playback rate.\r\n     *\r\n     * @return {number} The current playback rate.\r\n     */\r\n    getPlaybackRate() {\r\n        return this.backend.getPlaybackRate();\r\n    }\r\n\r\n    /**\r\n     * Toggle the volume on and off. If not currently muted it will save the\r\n     * current volume value and turn the volume off. If currently muted then it\r\n     * will restore the volume to the saved value, and then rest the saved\r\n     * value.\r\n     *\r\n     * @example wavesurfer.toggleMute();\r\n     */\r\n    toggleMute() {\r\n        this.setMute(!this.isMuted);\r\n    }\r\n\r\n    /**\r\n     * Enable or disable muted audio\r\n     *\r\n     * @param {boolean} mute Specify `true` to mute audio.\r\n     * @emits WaveSurfer#volume\r\n     * @emits WaveSurfer#mute\r\n     * @example\r\n     * // unmute\r\n     * wavesurfer.setMute(false);\r\n     * console.log(wavesurfer.getMute()) // logs false\r\n     */\r\n    setMute(mute) {\r\n        // ignore all muting requests if the audio is already in that state\r\n        if (mute === this.isMuted) {\r\n            this.fireEvent('mute', this.isMuted);\r\n            return;\r\n        }\r\n\r\n        if (this.backend.setMute) {\r\n            // Backends such as the MediaElement backend have their own handling\r\n            // of mute, let them handle it.\r\n            this.backend.setMute(mute);\r\n            this.isMuted = mute;\r\n        } else {\r\n            if (mute) {\r\n                // If currently not muted then save current volume,\r\n                // turn off the volume and update the mute properties\r\n                this.savedVolume = this.backend.getVolume();\r\n                this.backend.setVolume(0);\r\n                this.isMuted = true;\r\n                this.fireEvent('volume', 0);\r\n            } else {\r\n                // If currently muted then restore to the saved volume\r\n                // and update the mute properties\r\n                this.backend.setVolume(this.savedVolume);\r\n                this.isMuted = false;\r\n                this.fireEvent('volume', this.savedVolume);\r\n            }\r\n        }\r\n        this.fireEvent('mute', this.isMuted);\r\n    }\r\n\r\n    /**\r\n     * Get the current mute status.\r\n     *\r\n     * @example const isMuted = wavesurfer.getMute();\r\n     * @return {boolean} Current mute status\r\n     */\r\n    getMute() {\r\n        return this.isMuted;\r\n    }\r\n\r\n    /**\r\n     * Get the list of current set filters as an array.\r\n     *\r\n     * Filters must be set with setFilters method first\r\n     *\r\n     * @return {array} List of enabled filters\r\n     */\r\n    getFilters() {\r\n        return this.backend.filters || [];\r\n    }\r\n\r\n    /**\r\n     * Toggles `scrollParent` and redraws\r\n     *\r\n     * @example wavesurfer.toggleScroll();\r\n     */\r\n    toggleScroll() {\r\n        this.params.scrollParent = !this.params.scrollParent;\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Toggle mouse interaction\r\n     *\r\n     * @example wavesurfer.toggleInteraction();\r\n     */\r\n    toggleInteraction() {\r\n        this.params.interact = !this.params.interact;\r\n    }\r\n\r\n    /**\r\n     * Get the fill color of the waveform after the cursor.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getWaveColor() {\r\n        return this.params.waveColor;\r\n    }\r\n\r\n    /**\r\n     * Set the fill color of the waveform after the cursor.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setWaveColor('#ddd');\r\n     */\r\n    setWaveColor(color) {\r\n        this.params.waveColor = color;\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Get the fill color of the waveform behind the cursor.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getProgressColor() {\r\n        return this.params.progressColor;\r\n    }\r\n\r\n    /**\r\n     * Set the fill color of the waveform behind the cursor.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setProgressColor('#400');\r\n     */\r\n    setProgressColor(color) {\r\n        this.params.progressColor = color;\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Get the background color of the waveform container.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getBackgroundColor() {\r\n        return this.params.backgroundColor;\r\n    }\r\n\r\n    /**\r\n     * Set the background color of the waveform container.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\r\n     */\r\n    setBackgroundColor(color) {\r\n        this.params.backgroundColor = color;\r\n        util.style(this.container, { background: this.params.backgroundColor });\r\n    }\r\n\r\n    /**\r\n     * Get the fill color of the cursor indicating the playhead\r\n     * position.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getCursorColor() {\r\n        return this.params.cursorColor;\r\n    }\r\n\r\n    /**\r\n     * Set the fill color of the cursor indicating the playhead\r\n     * position.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setCursorColor('#222');\r\n     */\r\n    setCursorColor(color) {\r\n        this.params.cursorColor = color;\r\n        this.drawer.updateCursor();\r\n    }\r\n\r\n    /**\r\n     * Get the height of the waveform.\r\n     *\r\n     * @return {number} Height measured in pixels.\r\n     */\r\n    getHeight() {\r\n        return this.params.height;\r\n    }\r\n\r\n    /**\r\n     * Set the height of the waveform.\r\n     *\r\n     * @param {number} height Height measured in pixels.\r\n     * @example wavesurfer.setHeight(200);\r\n     */\r\n    setHeight(height) {\r\n        this.params.height = height;\r\n        this.drawer.setHeight(height * this.params.pixelRatio);\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Hide channels from being drawn on the waveform if splitting channels.\r\n     *\r\n     * For example, if we want to draw only the peaks for the right stereo channel:\r\n     *\r\n     * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\r\n     * wavesurfer.load('stereo_audio.mp3');\r\n     *\r\n     * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\r\n     *\r\n     * @param {array} channelIndices Channels to be filtered out from drawing.\r\n     * @version 4.0.0\r\n     */\r\n    setFilteredChannels(channelIndices) {\r\n        this.params.splitChannelsOptions.filterChannels = channelIndices;\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Get the correct peaks for current wave view-port and render wave\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#redraw\r\n     */\r\n    drawBuffer() {\r\n        const nominalWidth = Math.round(\r\n            this.getDuration() *\r\n                this.params.minPxPerSec *\r\n                this.params.pixelRatio\r\n        );\r\n        const parentWidth = this.drawer.getWidth();\r\n        let width = nominalWidth;\r\n        // always start at 0 after zooming for scrolling : issue redraw left part\r\n        let start = 0;\r\n        let end = Math.max(start + parentWidth, width);\r\n        // Fill container\r\n        if (\r\n            this.params.fillParent &&\r\n            (!this.params.scrollParent || nominalWidth < parentWidth)\r\n        ) {\r\n            width = parentWidth;\r\n            start = 0;\r\n            end = width;\r\n        }\r\n\r\n        let peaks;\r\n        if (this.params.partialRender) {\r\n            const newRanges = this.peakCache.addRangeToPeakCache(\r\n                width,\r\n                start,\r\n                end\r\n            );\r\n            let i;\r\n            for (i = 0; i < newRanges.length; i++) {\r\n                peaks = this.backend.getPeaks(\r\n                    width,\r\n                    newRanges[i][0],\r\n                    newRanges[i][1]\r\n                );\r\n                this.drawer.drawPeaks(\r\n                    peaks,\r\n                    width,\r\n                    newRanges[i][0],\r\n                    newRanges[i][1]\r\n                );\r\n            }\r\n        } else {\r\n            peaks = this.backend.getPeaks(width, start, end);\r\n            this.drawer.drawPeaks(peaks, width, start, end);\r\n        }\r\n        this.fireEvent('redraw', peaks, width);\r\n    }\r\n\r\n    /**\r\n     * Horizontally zooms the waveform in and out. It also changes the parameter\r\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\r\n     * with a falsey parameter will reset the zoom state.\r\n     *\r\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\r\n     * audio, if none is set the waveform returns to unzoomed state\r\n     * @emits WaveSurfer#zoom\r\n     * @example wavesurfer.zoom(20);\r\n     */\r\n    zoom(pxPerSec) {\r\n        if (!pxPerSec) {\r\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\r\n            this.params.scrollParent = false;\r\n        } else {\r\n            this.params.minPxPerSec = pxPerSec;\r\n            this.params.scrollParent = true;\r\n        }\r\n\r\n        this.drawBuffer();\r\n        this.drawer.progress(this.backend.getPlayedPercents());\r\n\r\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\r\n        this.fireEvent('zoom', pxPerSec);\r\n    }\r\n\r\n    /**\r\n     * Decode buffer and load\r\n     *\r\n     * @private\r\n     * @param {ArrayBuffer} arraybuffer Buffer to process\r\n     */\r\n    loadArrayBuffer(arraybuffer) {\r\n        this.decodeArrayBuffer(arraybuffer, data => {\r\n            if (!this.isDestroyed) {\r\n                this.loadDecodedBuffer(data);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Directly load an externally decoded AudioBuffer\r\n     *\r\n     * @private\r\n     * @param {AudioBuffer} buffer Buffer to process\r\n     * @emits WaveSurfer#ready\r\n     */\r\n    loadDecodedBuffer(buffer) {\r\n        this.backend.load(buffer);\r\n        this.drawBuffer();\r\n        this.isReady = true;\r\n        this.fireEvent('ready');\r\n    }\r\n\r\n    /**\r\n     * Loads audio data from a Blob or File object\r\n     *\r\n     * @param {Blob|File} blob Audio data\r\n     * @example\r\n     */\r\n    loadBlob(blob) {\r\n        // Create file reader\r\n        const reader = new FileReader();\r\n        reader.addEventListener('progress', e => this.onProgress(e));\r\n        reader.addEventListener('load', e =>\r\n            this.loadArrayBuffer(e.target.result)\r\n        );\r\n        reader.addEventListener('error', () =>\r\n            this.fireEvent('error', 'Error reading file')\r\n        );\r\n        reader.readAsArrayBuffer(blob);\r\n        this.empty();\r\n    }\r\n\r\n    /**\r\n     * Loads audio and re-renders the waveform.\r\n     *\r\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\r\n     * audio element with the audio\r\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\r\n     * the audio to render the waveform if this is specified\r\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\r\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\r\n     * @param {?number} duration The duration of the audio. This is used to\r\n     * render the peaks data in the correct size for the audio duration (as\r\n     * befits the current `minPxPerSec` and zoom value) without having to decode\r\n     * the audio.\r\n     * @returns {void}\r\n     * @throws Will throw an error if the `url` argument is empty.\r\n     * @example\r\n     * // uses fetch or media element to load file (depending on backend)\r\n     * wavesurfer.load('http://example.com/demo.wav');\r\n     *\r\n     * // setting preload attribute with media element backend and supplying\r\n     * // peaks\r\n     * wavesurfer.load(\r\n     *   'http://example.com/demo.wav',\r\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\r\n     *   true\r\n     * );\r\n     */\r\n    load(url, peaks, preload, duration) {\r\n        if (!url) {\r\n            throw new Error('url parameter cannot be empty');\r\n        }\r\n        this.empty();\r\n        if (preload) {\r\n            // check whether the preload attribute will be usable and if not log\r\n            // a warning listing the reasons why not and nullify the variable\r\n            const preloadIgnoreReasons = {\r\n                \"Preload is not 'auto', 'none' or 'metadata'\":\r\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\r\n                'Peaks are not provided': !peaks,\r\n                \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\":\r\n                    ['MediaElement', 'MediaElementWebAudio'].indexOf(\r\n                        this.params.backend\r\n                    ) === -1,\r\n                'Url is not of type string': typeof url !== 'string'\r\n            };\r\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\r\n                reason => preloadIgnoreReasons[reason]\r\n            );\r\n            if (activeReasons.length) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\r\n                        activeReasons.join('\\n\\t- ')\r\n                );\r\n                // stop invalid values from being used\r\n                preload = null;\r\n            }\r\n        }\r\n\r\n        switch (this.params.backend) {\r\n            case 'WebAudio':\r\n                return this.loadBuffer(url, peaks, duration);\r\n            case 'MediaElement':\r\n            case 'MediaElementWebAudio':\r\n                return this.loadMediaElement(url, peaks, preload, duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads audio using Web Audio buffer backend.\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#waveform-ready\r\n     * @param {string} url URL of audio file\r\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\r\n     * @param {?number} duration Optional duration of audio file\r\n     * @returns {void}\r\n     */\r\n    loadBuffer(url, peaks, duration) {\r\n        const load = action => {\r\n            if (action) {\r\n                this.tmpEvents.push(this.once('ready', action));\r\n            }\r\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\r\n        };\r\n\r\n        if (peaks) {\r\n            this.backend.setPeaks(peaks, duration);\r\n            this.drawBuffer();\r\n            this.fireEvent('waveform-ready');\r\n            this.tmpEvents.push(this.once('interaction', load));\r\n        } else {\r\n            return load();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Either create a media element, or load an existing media element.\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#waveform-ready\r\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\r\n     * existing HTML5 Audio/Video Element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\r\n     * dependency\r\n     * @param {?boolean} preload Set to true if the preload attribute of the\r\n     * audio element should be enabled\r\n     * @param {?number} duration Optional duration of audio file\r\n     */\r\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\r\n        let url = urlOrElt;\r\n\r\n        if (typeof urlOrElt === 'string') {\r\n            this.backend.load(url, this.mediaContainer, peaks, preload);\r\n        } else {\r\n            const elt = urlOrElt;\r\n            this.backend.loadElt(elt, peaks);\r\n\r\n            // If peaks are not provided,\r\n            // url = element.src so we can get peaks with web audio\r\n            url = elt.src;\r\n        }\r\n\r\n        this.tmpEvents.push(\r\n            this.backend.once('canplay', () => {\r\n                // ignore when backend was already destroyed\r\n                if (!this.backend.destroyed) {\r\n                    this.drawBuffer();\r\n                    this.isReady = true;\r\n                    this.fireEvent('ready');\r\n                }\r\n            }),\r\n            this.backend.once('error', err => this.fireEvent('error', err))\r\n        );\r\n\r\n        // If peaks are provided, render them and fire the `waveform-ready` event.\r\n        if (peaks) {\r\n            this.backend.setPeaks(peaks, duration);\r\n            this.drawBuffer();\r\n            this.fireEvent('waveform-ready');\r\n        }\r\n\r\n        // If no pre-decoded peaks are provided, or are provided with\r\n        // forceDecode flag, attempt to download the audio file and decode it\r\n        // with Web Audio.\r\n        if (\r\n            (!peaks || this.params.forceDecode) &&\r\n            this.backend.supportsWebAudio()\r\n        ) {\r\n            this.getArrayBuffer(url, arraybuffer => {\r\n                this.decodeArrayBuffer(arraybuffer, buffer => {\r\n                    this.backend.buffer = buffer;\r\n                    this.backend.setPeaks(null);\r\n                    this.drawBuffer();\r\n                    this.fireEvent('waveform-ready');\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Decode an array buffer and pass data to a callback\r\n     *\r\n     * @private\r\n     * @param {Object} arraybuffer The array buffer to decode\r\n     * @param {function} callback The function to call on complete\r\n     */\r\n    decodeArrayBuffer(arraybuffer, callback) {\r\n        this.arraybuffer = arraybuffer;\r\n        this.backend.decodeArrayBuffer(\r\n            arraybuffer,\r\n            data => {\r\n                // Only use the decoded data if we haven't been destroyed or\r\n                // another decode started in the meantime\r\n                if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\r\n                    callback(data);\r\n                    this.arraybuffer = null;\r\n                }\r\n            },\r\n            () => this.fireEvent('error', 'Error decoding audiobuffer')\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Load an array buffer using fetch and pass the result to a callback\r\n     *\r\n     * @param {string} url The URL of the file object\r\n     * @param {function} callback The function to call on complete\r\n     * @returns {util.fetchFile} fetch call\r\n     * @private\r\n     */\r\n    getArrayBuffer(url, callback) {\r\n        let options = Object.assign(\r\n            {\r\n                url: url,\r\n                responseType: 'arraybuffer'\r\n            },\r\n            this.params.xhr\r\n        );\r\n        const request = util.fetchFile(options);\r\n\r\n        this.currentRequest = request;\r\n\r\n        this.tmpEvents.push(\r\n            request.on('progress', e => {\r\n                this.onProgress(e);\r\n            }),\r\n            request.on('success', data => {\r\n                callback(data);\r\n                this.currentRequest = null;\r\n            }),\r\n            request.on('error', e => {\r\n                this.fireEvent('error', e);\r\n                this.currentRequest = null;\r\n            })\r\n        );\r\n\r\n        return request;\r\n    }\r\n\r\n    /**\r\n     * Called while the audio file is loading\r\n     *\r\n     * @private\r\n     * @param {Event} e Progress event\r\n     * @emits WaveSurfer#loading\r\n     */\r\n    onProgress(e) {\r\n        let percentComplete;\r\n        if (e.lengthComputable) {\r\n            percentComplete = e.loaded / e.total;\r\n        } else {\r\n            // Approximate progress with an asymptotic\r\n            // function, and assume downloads in the 1-3 MB range.\r\n            percentComplete = e.loaded / (e.loaded + 1000000);\r\n        }\r\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\r\n    }\r\n\r\n    /**\r\n     * Exports PCM data into a JSON array and opens in a new window.\r\n     *\r\n     * @param {number} length=1024 The scale in which to export the peaks\r\n     * @param {number} accuracy=10000\r\n     * @param {?boolean} noWindow Set to true to disable opening a new\r\n     * window with the JSON\r\n     * @param {number} start Start index\r\n     * @param {number} end End index\r\n     * @return {Promise} Promise that resolves with array of peaks\r\n     */\r\n    exportPCM(length, accuracy, noWindow, start, end) {\r\n        length = length || 1024;\r\n        start = start || 0;\r\n        accuracy = accuracy || 10000;\r\n        noWindow = noWindow || false;\r\n        const peaks = this.backend.getPeaks(length, start, end);\r\n        const arr = [].map.call(\r\n            peaks,\r\n            val => Math.round(val * accuracy) / accuracy\r\n        );\r\n        return new Promise((resolve, reject) => {\r\n            const json = JSON.stringify(arr);\r\n\r\n            if (!noWindow) {\r\n                window.open(\r\n                    'data:application/json;charset=utf-8,' +\r\n                        encodeURIComponent(json)\r\n                );\r\n            }\r\n            resolve(json);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Save waveform image as data URI.\r\n     *\r\n     * The default format is `'image/png'`. Other supported types are\r\n     * `'image/jpeg'` and `'image/webp'`.\r\n     *\r\n     * @param {string} format='image/png' A string indicating the image format.\r\n     * The default format type is `'image/png'`.\r\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\r\n     * quality to use for image formats that use lossy compression such as\r\n     * `'image/jpeg'`` and `'image/webp'`.\r\n     * @param {string} type Image data type to return. Either 'dataURL' (default)\r\n     * or 'blob'.\r\n     * @return {string|string[]|Promise} When using `'dataURL'` type this returns\r\n     * a single data URL or an array of data URLs, one for each canvas. When using\r\n     * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\r\n     * instances, one for each canvas.\r\n     */\r\n    exportImage(format, quality, type) {\r\n        if (!format) {\r\n            format = 'image/png';\r\n        }\r\n        if (!quality) {\r\n            quality = 1;\r\n        }\r\n        if (!type) {\r\n            type = 'dataURL';\r\n        }\r\n\r\n        return this.drawer.getImage(format, quality, type);\r\n    }\r\n\r\n    /**\r\n     * Cancel any fetch request currently in progress\r\n     */\r\n    cancelAjax() {\r\n        if (this.currentRequest && this.currentRequest.controller) {\r\n            // If the current request has a ProgressHandler, then its ReadableStream might need to be cancelled too\r\n            // See: Wavesurfer issue #2042\r\n            // See Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\r\n            if (this.currentRequest._reader) {\r\n                // Ignoring exceptions thrown by call to cancel()\r\n                this.currentRequest._reader.cancel().catch(err => {});\r\n            }\r\n\r\n            this.currentRequest.controller.abort();\r\n            this.currentRequest = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    clearTmpEvents() {\r\n        this.tmpEvents.forEach(e => e.un());\r\n    }\r\n\r\n    /**\r\n     * Display empty waveform.\r\n     */\r\n    empty() {\r\n        if (!this.backend.isPaused()) {\r\n            this.stop();\r\n            this.backend.disconnectSource();\r\n        }\r\n        this.isReady = false;\r\n        this.cancelAjax();\r\n        this.clearTmpEvents();\r\n\r\n        // empty drawer\r\n        this.drawer.progress(0);\r\n        this.drawer.setWidth(0);\r\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\r\n    }\r\n\r\n    /**\r\n     * Remove events, elements and disconnect WebAudio nodes.\r\n     *\r\n     * @emits WaveSurfer#destroy\r\n     */\r\n    destroy() {\r\n        this.destroyAllPlugins();\r\n        this.fireEvent('destroy');\r\n        this.cancelAjax();\r\n        this.clearTmpEvents();\r\n        this.unAll();\r\n        if (this.params.responsive !== false) {\r\n            window.removeEventListener('resize', this._onResize, true);\r\n            window.removeEventListener(\r\n                'orientationchange',\r\n                this._onResize,\r\n                true\r\n            );\r\n        }\r\n        if (this.backend) {\r\n            this.backend.destroy();\r\n        }\r\n        if (this.drawer) {\r\n            this.drawer.destroy();\r\n        }\r\n        this.isDestroyed = true;\r\n        this.isReady = false;\r\n        this.arraybuffer = null;\r\n    }\r\n}\r\n","import * as util from './util';\r\n\r\n// using constants to prevent someone writing the string wrong\r\nconst PLAYING = 'playing';\r\nconst PAUSED = 'paused';\r\nconst FINISHED = 'finished';\r\n\r\n/**\r\n * WebAudio backend\r\n *\r\n * @extends {Observer}\r\n */\r\nexport default class WebAudio extends util.Observer {\r\n    /** scriptBufferSize: size of the processing buffer */\r\n    static scriptBufferSize = 256;\r\n    /** audioContext: allows to process audio with WebAudio API */\r\n    audioContext = null;\r\n    /** @private */\r\n    offlineAudioContext = null;\r\n    /** @private */\r\n    stateBehaviors = {\r\n        [PLAYING]: {\r\n            init() {\r\n                this.addOnAudioProcess();\r\n            },\r\n            getPlayedPercents() {\r\n                const duration = this.getDuration();\r\n                return this.getCurrentTime() / duration || 0;\r\n            },\r\n            getCurrentTime() {\r\n                return this.startPosition + this.getPlayedTime();\r\n            }\r\n        },\r\n        [PAUSED]: {\r\n            init() {\r\n                this.removeOnAudioProcess();\r\n            },\r\n            getPlayedPercents() {\r\n                const duration = this.getDuration();\r\n                return this.getCurrentTime() / duration || 0;\r\n            },\r\n            getCurrentTime() {\r\n                return this.startPosition;\r\n            }\r\n        },\r\n        [FINISHED]: {\r\n            init() {\r\n                this.removeOnAudioProcess();\r\n                this.fireEvent('finish');\r\n            },\r\n            getPlayedPercents() {\r\n                return 1;\r\n            },\r\n            getCurrentTime() {\r\n                return this.getDuration();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Does the browser support this backend\r\n     *\r\n     * @return {boolean} Whether or not this browser supports this backend\r\n     */\r\n    supportsWebAudio() {\r\n        return !!(window.AudioContext || window.webkitAudioContext);\r\n    }\r\n\r\n    /**\r\n     * Get the audio context used by this backend or create one\r\n     *\r\n     * @return {AudioContext} Existing audio context, or creates a new one\r\n     */\r\n    getAudioContext() {\r\n        if (!window.WaveSurferAudioContext) {\r\n            window.WaveSurferAudioContext = new (window.AudioContext ||\r\n                window.webkitAudioContext)();\r\n        }\r\n        return window.WaveSurferAudioContext;\r\n    }\r\n\r\n    /**\r\n     * Get the offline audio context used by this backend or create one\r\n     *\r\n     * @param {number} sampleRate The sample rate to use\r\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\r\n     * a new one\r\n     */\r\n    getOfflineAudioContext(sampleRate) {\r\n        if (!window.WaveSurferOfflineAudioContext) {\r\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\r\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\r\n        }\r\n        return window.WaveSurferOfflineAudioContext;\r\n    }\r\n\r\n    /**\r\n     * Construct the backend\r\n     *\r\n     * @param {WavesurferParams} params Wavesurfer parameters\r\n     */\r\n    constructor(params) {\r\n        super();\r\n        /** @private */\r\n        this.params = params;\r\n        /** ac: Audio Context instance */\r\n        this.ac =\r\n            params.audioContext ||\r\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\r\n        /**@private */\r\n        this.lastPlay = this.ac.currentTime;\r\n        /** @private */\r\n        this.startPosition = 0;\r\n        /** @private */\r\n        this.scheduledPause = null;\r\n        /** @private */\r\n        this.states = {\r\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\r\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\r\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\r\n        };\r\n        /** @private */\r\n        this.buffer = null;\r\n        /** @private */\r\n        this.filters = [];\r\n        /** gainNode: allows to control audio volume */\r\n        this.gainNode = null;\r\n        /** @private */\r\n        this.mergedPeaks = null;\r\n        /** @private */\r\n        this.offlineAc = null;\r\n        /** @private */\r\n        this.peaks = null;\r\n        /** @private */\r\n        this.playbackRate = 1;\r\n        /** analyser: provides audio analysis information */\r\n        this.analyser = null;\r\n        /** scriptNode: allows processing audio */\r\n        this.scriptNode = null;\r\n        /** @private */\r\n        this.source = null;\r\n        /** @private */\r\n        this.splitPeaks = [];\r\n        /** @private */\r\n        this.state = null;\r\n        /** @private */\r\n        this.explicitDuration = params.duration;\r\n        /**\r\n         * Boolean indicating if the backend was destroyed.\r\n         */\r\n        this.destroyed = false;\r\n    }\r\n\r\n    /**\r\n     * Initialise the backend, called in `wavesurfer.createBackend()`\r\n     */\r\n    init() {\r\n        this.createVolumeNode();\r\n        this.createScriptNode();\r\n        this.createAnalyserNode();\r\n\r\n        this.setState(PAUSED);\r\n        this.setPlaybackRate(this.params.audioRate);\r\n        this.setLength(0);\r\n    }\r\n\r\n    /** @private */\r\n    disconnectFilters() {\r\n        if (this.filters) {\r\n            this.filters.forEach(filter => {\r\n                filter && filter.disconnect();\r\n            });\r\n            this.filters = null;\r\n            // Reconnect direct path\r\n            this.analyser.connect(this.gainNode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * @param {string} state The new state\r\n     */\r\n    setState(state) {\r\n        if (this.state !== this.states[state]) {\r\n            this.state = this.states[state];\r\n            this.state.init.call(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unpacked `setFilters()`\r\n     *\r\n     * @param {...AudioNode} filters One or more filters to set\r\n     */\r\n    setFilter(...filters) {\r\n        this.setFilters(filters);\r\n    }\r\n\r\n    /**\r\n     * Insert custom Web Audio nodes into the graph\r\n     *\r\n     * @param {AudioNode[]} filters Packed filters array\r\n     * @example\r\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\r\n     * wavesurfer.backend.setFilter(lowpass);\r\n     */\r\n    setFilters(filters) {\r\n        // Remove existing filters\r\n        this.disconnectFilters();\r\n\r\n        // Insert filters if filter array not empty\r\n        if (filters && filters.length) {\r\n            this.filters = filters;\r\n\r\n            // Disconnect direct path before inserting filters\r\n            this.analyser.disconnect();\r\n\r\n            // Connect each filter in turn\r\n            filters\r\n                .reduce((prev, curr) => {\r\n                    prev.connect(curr);\r\n                    return curr;\r\n                }, this.analyser)\r\n                .connect(this.gainNode);\r\n        }\r\n    }\r\n    /** Create ScriptProcessorNode to process audio */\r\n    createScriptNode() {\r\n        if (this.params.audioScriptProcessor) {\r\n            this.scriptNode = this.params.audioScriptProcessor;\r\n        } else {\r\n            if (this.ac.createScriptProcessor) {\r\n                this.scriptNode = this.ac.createScriptProcessor(\r\n                    WebAudio.scriptBufferSize\r\n                );\r\n            } else {\r\n                this.scriptNode = this.ac.createJavaScriptNode(\r\n                    WebAudio.scriptBufferSize\r\n                );\r\n            }\r\n        }\r\n        this.scriptNode.connect(this.ac.destination);\r\n    }\r\n\r\n    /** @private */\r\n    addOnAudioProcess() {\r\n        this.scriptNode.onaudioprocess = () => {\r\n            const time = this.getCurrentTime();\r\n\r\n            if (time >= this.getDuration()) {\r\n                this.setState(FINISHED);\r\n                this.fireEvent('pause');\r\n            } else if (time >= this.scheduledPause) {\r\n                this.pause();\r\n            } else if (this.state === this.states[PLAYING]) {\r\n                this.fireEvent('audioprocess', time);\r\n            }\r\n        };\r\n    }\r\n\r\n    /** @private */\r\n    removeOnAudioProcess() {\r\n        this.scriptNode.onaudioprocess = () => {};\r\n    }\r\n    /** Create analyser node to perform audio analysis */\r\n    createAnalyserNode() {\r\n        this.analyser = this.ac.createAnalyser();\r\n        this.analyser.connect(this.gainNode);\r\n    }\r\n\r\n    /**\r\n     * Create the gain node needed to control the playback volume.\r\n     *\r\n     */\r\n    createVolumeNode() {\r\n        // Create gain node using the AudioContext\r\n        if (this.ac.createGain) {\r\n            this.gainNode = this.ac.createGain();\r\n        } else {\r\n            this.gainNode = this.ac.createGainNode();\r\n        }\r\n        // Add the gain node to the graph\r\n        this.gainNode.connect(this.ac.destination);\r\n    }\r\n\r\n    /**\r\n     * Set the sink id for the media player\r\n     *\r\n     * @param {string} deviceId String value representing audio device id.\r\n     * @returns {Promise} A Promise that resolves to `undefined` when there\r\n     * are no errors.\r\n     */\r\n    setSinkId(deviceId) {\r\n        if (deviceId) {\r\n            /**\r\n             * The webaudio API doesn't currently support setting the device\r\n             * output. Here we create an HTMLAudioElement, connect the\r\n             * webaudio stream to that element and setSinkId there.\r\n             */\r\n            let audio = new window.Audio();\r\n            if (!audio.setSinkId) {\r\n                return Promise.reject(\r\n                    new Error('setSinkId is not supported in your browser')\r\n                );\r\n            }\r\n            audio.autoplay = true;\r\n            const dest = this.ac.createMediaStreamDestination();\r\n            this.gainNode.disconnect();\r\n            this.gainNode.connect(dest);\r\n            audio.srcObject = dest.stream;\r\n\r\n            return audio.setSinkId(deviceId);\r\n        } else {\r\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the audio volume\r\n     *\r\n     * @param {number} value A floating point value between 0 and 1.\r\n     */\r\n    setVolume(value) {\r\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\r\n    }\r\n\r\n    /**\r\n     * Get the current volume\r\n     *\r\n     * @return {number} value A floating point value between 0 and 1.\r\n     */\r\n    getVolume() {\r\n        return this.gainNode.gain.value;\r\n    }\r\n\r\n    /**\r\n     * Decode an array buffer and pass data to a callback\r\n     *\r\n     * @private\r\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\r\n     * @param {function} callback The function to call on complete.\r\n     * @param {function} errback The function to call on error.\r\n     */\r\n    decodeArrayBuffer(arraybuffer, callback, errback) {\r\n        if (!this.offlineAc) {\r\n            this.offlineAc = this.getOfflineAudioContext(\r\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\r\n            );\r\n        }\r\n        if ('AudioContext' in window) {\r\n            this.offlineAc.decodeAudioData(arraybuffer).then(\r\n                (data) => callback(data)\r\n            ).catch(\r\n                (err) => errback(err)\r\n            );\r\n        } else {\r\n            // Safari: no support for Promise-based decodeAudioData yet\r\n            this.offlineAc.decodeAudioData(\r\n                arraybuffer,\r\n                data => callback(data),\r\n                errback\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set pre-decoded peaks\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\r\n     * @param {?number} duration Explicit duration\r\n     */\r\n    setPeaks(peaks, duration) {\r\n        if (duration != null) {\r\n            this.explicitDuration = duration;\r\n        }\r\n        this.peaks = peaks;\r\n    }\r\n\r\n    /**\r\n     * Set the rendered length (different from the length of the audio)\r\n     *\r\n     * @param {number} length The rendered length\r\n     */\r\n    setLength(length) {\r\n        // No resize, we can preserve the cached peaks.\r\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\r\n            return;\r\n        }\r\n\r\n        this.splitPeaks = [];\r\n        this.mergedPeaks = [];\r\n        // Set the last element of the sparse array so the peak arrays are\r\n        // appropriately sized for other calculations.\r\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\r\n        let c;\r\n        for (c = 0; c < channels; c++) {\r\n            this.splitPeaks[c] = [];\r\n            this.splitPeaks[c][2 * (length - 1)] = 0;\r\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\r\n        }\r\n        this.mergedPeaks[2 * (length - 1)] = 0;\r\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\r\n    }\r\n\r\n    /**\r\n     * Compute the max and min value of the waveform when broken into <length> subranges.\r\n     *\r\n     * @param {number} length How many subranges to break the waveform into.\r\n     * @param {number} first First sample in the required range.\r\n     * @param {number} last Last sample in the required range.\r\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\r\n     * peaks consisting of (max, min) values for each subrange.\r\n     */\r\n    getPeaks(length, first, last) {\r\n        if (this.peaks) {\r\n            return this.peaks;\r\n        }\r\n        if (!this.buffer) {\r\n            return [];\r\n        }\r\n\r\n        first = first || 0;\r\n        last = last || length - 1;\r\n\r\n        this.setLength(length);\r\n\r\n        if (!this.buffer) {\r\n            return this.params.splitChannels\r\n                ? this.splitPeaks\r\n                : this.mergedPeaks;\r\n        }\r\n\r\n        /**\r\n         * The following snippet fixes a buffering data issue on the Safari\r\n         * browser which returned undefined It creates the missing buffer based\r\n         * on 1 channel, 4096 samples and the sampleRate from the current\r\n         * webaudio context 4096 samples seemed to be the best fit for rendering\r\n         * will review this code once a stable version of Safari TP is out\r\n         */\r\n        if (!this.buffer.length) {\r\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\r\n            this.buffer = newBuffer.buffer;\r\n        }\r\n\r\n        const sampleSize = this.buffer.length / length;\r\n        const sampleStep = ~~(sampleSize / 10) || 1;\r\n        const channels = this.buffer.numberOfChannels;\r\n        let c;\r\n\r\n        for (c = 0; c < channels; c++) {\r\n            const peaks = this.splitPeaks[c];\r\n            const chan = this.buffer.getChannelData(c);\r\n            let i;\r\n\r\n            for (i = first; i <= last; i++) {\r\n                const start = ~~(i * sampleSize);\r\n                const end = ~~(start + sampleSize);\r\n                /**\r\n                 * Initialize the max and min to the first sample of this\r\n                 * subrange, so that even if the samples are entirely\r\n                 * on one side of zero, we still return the true max and\r\n                 * min values in the subrange.\r\n                 */\r\n                let min = chan[start];\r\n                let max = min;\r\n                let j;\r\n\r\n                for (j = start; j < end; j += sampleStep) {\r\n                    const value = chan[j];\r\n\r\n                    if (value > max) {\r\n                        max = value;\r\n                    }\r\n\r\n                    if (value < min) {\r\n                        min = value;\r\n                    }\r\n                }\r\n\r\n                peaks[2 * i] = max;\r\n                peaks[2 * i + 1] = min;\r\n\r\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\r\n                    this.mergedPeaks[2 * i] = max;\r\n                }\r\n\r\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\r\n                    this.mergedPeaks[2 * i + 1] = min;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\r\n    }\r\n\r\n    /**\r\n     * Get the position from 0 to 1\r\n     *\r\n     * @return {number} Position\r\n     */\r\n    getPlayedPercents() {\r\n        return this.state.getPlayedPercents.call(this);\r\n    }\r\n\r\n    /** @private */\r\n    disconnectSource() {\r\n        if (this.source) {\r\n            this.source.disconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\r\n     */\r\n    destroyWebAudio() {\r\n        this.disconnectFilters();\r\n        this.disconnectSource();\r\n        this.gainNode.disconnect();\r\n        this.scriptNode.disconnect();\r\n        this.analyser.disconnect();\r\n\r\n        // close the audioContext if closeAudioContext option is set to true\r\n        if (this.params.closeAudioContext) {\r\n            // check if browser supports AudioContext.close()\r\n            if (\r\n                typeof this.ac.close === 'function' &&\r\n                this.ac.state != 'closed'\r\n            ) {\r\n                this.ac.close();\r\n            }\r\n            // clear the reference to the audiocontext\r\n            this.ac = null;\r\n            // clear the actual audiocontext, either passed as param or the\r\n            // global singleton\r\n            if (!this.params.audioContext) {\r\n                window.WaveSurferAudioContext = null;\r\n            } else {\r\n                this.params.audioContext = null;\r\n            }\r\n            // clear the offlineAudioContext\r\n            window.WaveSurferOfflineAudioContext = null;\r\n        }\r\n    }\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     */\r\n    destroy() {\r\n        if (!this.isPaused()) {\r\n            this.pause();\r\n        }\r\n        this.unAll();\r\n        this.buffer = null;\r\n        this.destroyed = true;\r\n\r\n        this.destroyWebAudio();\r\n    }\r\n\r\n    /**\r\n     * Loaded a decoded audio buffer\r\n     *\r\n     * @param {Object} buffer Decoded audio buffer to load\r\n     */\r\n    load(buffer) {\r\n        this.startPosition = 0;\r\n        this.lastPlay = this.ac.currentTime;\r\n        this.buffer = buffer;\r\n        this.createSource();\r\n    }\r\n\r\n    /** @private */\r\n    createSource() {\r\n        this.disconnectSource();\r\n        this.source = this.ac.createBufferSource();\r\n\r\n        // adjust for old browsers\r\n        this.source.start = this.source.start || this.source.noteGrainOn;\r\n        this.source.stop = this.source.stop || this.source.noteOff;\r\n\r\n        this.setPlaybackRate(this.playbackRate);\r\n        this.source.buffer = this.buffer;\r\n        this.source.connect(this.analyser);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * some browsers require an explicit call to #resume before they will play back audio\r\n     */\r\n    resumeAudioContext() {\r\n        if (this.ac.state == 'suspended') {\r\n            this.ac.resume && this.ac.resume();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\r\n     *\r\n     * @return {boolean} Whether or not this backend is currently paused\r\n     */\r\n    isPaused() {\r\n        return this.state !== this.states[PLAYING];\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.getDuration()`\r\n     *\r\n     * @return {number} Duration of loaded buffer\r\n     */\r\n    getDuration() {\r\n        if (this.explicitDuration) {\r\n            return this.explicitDuration;\r\n        }\r\n        if (!this.buffer) {\r\n            return 0;\r\n        }\r\n        return this.buffer.duration;\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.seekTo()`\r\n     *\r\n     * @param {number} start Position to start at in seconds\r\n     * @param {number} end Position to end at in seconds\r\n     * @return {{start: number, end: number}} Object containing start and end\r\n     * positions\r\n     */\r\n    seekTo(start, end) {\r\n        if (!this.buffer) {\r\n            return;\r\n        }\r\n\r\n        this.scheduledPause = null;\r\n\r\n        if (start == null) {\r\n            start = this.getCurrentTime();\r\n            if (start >= this.getDuration()) {\r\n                start = 0;\r\n            }\r\n        }\r\n        if (end == null) {\r\n            end = this.getDuration();\r\n        }\r\n\r\n        this.startPosition = start;\r\n        this.lastPlay = this.ac.currentTime;\r\n\r\n        if (this.state === this.states[FINISHED]) {\r\n            this.setState(PAUSED);\r\n        }\r\n\r\n        return {\r\n            start: start,\r\n            end: end\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get the playback position in seconds\r\n     *\r\n     * @return {number} The playback position in seconds\r\n     */\r\n    getPlayedTime() {\r\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Plays the loaded audio region.\r\n     *\r\n     * @param {number} start Start offset in seconds, relative to the beginning\r\n     * of a clip.\r\n     * @param {number} end When to stop relative to the beginning of a clip.\r\n     */\r\n    play(start, end) {\r\n        if (!this.buffer) {\r\n            return;\r\n        }\r\n\r\n        // need to re-create source on each playback\r\n        this.createSource();\r\n\r\n        const adjustedTime = this.seekTo(start, end);\r\n\r\n        start = adjustedTime.start;\r\n        end = adjustedTime.end;\r\n\r\n        this.scheduledPause = end;\r\n\r\n        this.source.start(0, start);\r\n\r\n        this.resumeAudioContext();\r\n\r\n        this.setState(PLAYING);\r\n\r\n        this.fireEvent('play');\r\n    }\r\n\r\n    /**\r\n     * Pauses the loaded audio.\r\n     */\r\n    pause() {\r\n        this.scheduledPause = null;\r\n\r\n        this.startPosition += this.getPlayedTime();\r\n        this.source && this.source.stop(0);\r\n\r\n        this.setState(PAUSED);\r\n\r\n        this.fireEvent('pause');\r\n    }\r\n\r\n    /**\r\n     * Returns the current time in seconds relative to the audio-clip's\r\n     * duration.\r\n     *\r\n     * @return {number} The current time in seconds\r\n     */\r\n    getCurrentTime() {\r\n        return this.state.getCurrentTime.call(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\r\n     *\r\n     * @return {number} The current playback rate\r\n     */\r\n    getPlaybackRate() {\r\n        return this.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Set the audio source playback rate.\r\n     *\r\n     * @param {number} value The playback rate to use\r\n     */\r\n    setPlaybackRate(value) {\r\n        this.playbackRate = value || 1;\r\n        this.source && this.source.playbackRate.setValueAtTime(\r\n            this.playbackRate,\r\n            this.ac.currentTime\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set a point in seconds for playback to stop at.\r\n     *\r\n     * @param {number} end Position to end at\r\n     * @version 3.3.0\r\n     */\r\n    setPlayEnd(end) {\r\n        this.scheduledPause = end;\r\n    }\r\n}\r\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(631);\n"],"sourceRoot":""}