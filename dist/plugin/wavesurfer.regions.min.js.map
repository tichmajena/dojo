{"version":3,"sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/./src/plugin/regions/index.js","webpack://WaveSurfer.[name]/./src/plugin/regions/region.js","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/webpack/startup"],"names":["root","factory","exports","module","define","amd","this","RegionsPlugin","params","ws","wavesurfer","util","getRegionSnapToGridValue","value","maxRegions","regionsMinLength","Object","getOwnPropertyNames","Observer","prototype","forEach","key","Region","_onBackendCreated","wrapper","drawer","regions","region","edgeScrollWidth","clientWidth","add","list","_onReady","dragSelection","enableDragSelection","keys","id","updateRender","name","deferInit","staticProps","addRegion","options","initialisedPluginList","initPlugin","clearRegions","clear","disableDragSelection","instance","isReady","once","un","length","wouldExceedMaxRegions","minLength","on","remove","drag","maxScroll","start","touchId","scrollDirection","wrapperRect","slop","container","scroll","scrollParent","scrollSpeed","scrollThreshold","duration","getDuration","pxMove","edgeScroll","e","scrollLeft","Math","min","max","end","handleEvent","update","window","requestAnimationFrame","eventDown","touches","targetTouches","identifier","scrollWidth","getBoundingClientRect","addEventListener","removeEventListener","eventUp","preventClick","fireEvent","document","body","eventMove","startUpdate","endUpdate","x","clientX","left","right","time","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset","round","regionsUtils","style","regionsUtil","getId","Number","resize","undefined","Boolean","isResizing","isDragging","loop","color","handleStyle","handleLeftEl","handleRightEl","data","attributes","maxLength","_onRedraw","preventContextMenu","channelIdx","parseInt","regionHeight","marginTop","channelCount","backend","buffer","numberOfChannels","floor","getHeight","formatTimeCallback","bindInOut","render","updateHandlesResize","element","removeChild","s","play","regionEl","createElement","attrname","className","title","formatTime","setAttribute","position","zIndex","height","top","appendChild","css","cursor","width","backgroundColor","handleLeftCss","assign","handleRightCss","bindEvents","map","slice","join","pixelRatio","dur","getWidth","startLimited","endLimited","regionWidth","firedIn","firedOut","onProcess","realTime","preventDefault","stopPropagation","bindDragEvents","startTime","regionLeftHalfTime","regionRightHalfTime","updated","distanceBetweenCursorAndWrapperEdge","regionHalfTimeWidth","adjustment","minPxPerSec","calculatedLeft","calculatedRight","delta","onDrag","onResize","onDown","target","tagName","toLowerCase","classList","contains","onUp","onMove","maxEnd","direction","cursorStyle","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"wavesurfer.regions.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"regions\"] = factory();\n})(this, function() {\nreturn ","/**\r\n *  @since 4.0.0 This class has been split\r\n *\r\n * @typedef {Object} RegionsPluginParams\r\n * @property {?boolean} dragSelection Enable creating regions by dragging with\r\n * the mouse\r\n * @property {?RegionParams[]} regions Regions that should be added upon\r\n * initialisation\r\n * @property {number} slop=2 The sensitivity of the mouse dragging\r\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\r\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * @property {number[]} maxRegions Maximum number of regions that may be created by the user at one time.\r\n * `initPlugin('regions')`\r\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\r\n * @property {?number} edgeScrollWidth='5% from container edges' Optional width for edgeScroll to start\r\n */\r\n\r\n/**\r\n * @typedef {Object} RegionParams\r\n * @desc The parameters used to describe a region.\r\n * @example wavesurfer.addRegion(regionParams);\r\n * @property {string} id=→random The id of the region\r\n * @property {number} start=0 The start position of the region (in seconds).\r\n * @property {number} end=0 The end position of the region (in seconds).\r\n * @property {?boolean} loop Whether to loop the region when played back.\r\n * @property {boolean} drag=true Allow/disallow dragging the region.\r\n * @property {boolean} resize=true Allow/disallow resizing the region.\r\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\r\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\r\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\r\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\r\n */\r\n\r\nimport {Region} from \"./region.js\";\r\n\r\n/**\r\n * Regions are visual overlays on waveform that can be used to play and loop\r\n * portions of audio. Regions can be dragged and resized.\r\n *\r\n * Visual customization is possible via CSS (using the selectors\r\n * `.wavesurfer-region` and `.wavesurfer-handle`).\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n *\r\n * @example\r\n * // es6\r\n * import RegionsPlugin from 'wavesurfer.regions.js';\r\n *\r\n * // commonjs\r\n * var RegionsPlugin = require('wavesurfer.regions.js');\r\n *\r\n * // if you are using <script> tags\r\n * var RegionsPlugin = window.WaveSurfer.regions;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     RegionsPlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class RegionsPlugin {\r\n    /**\r\n     * Regions plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'regions',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            staticProps: {\r\n                addRegion(options) {\r\n                    if (!this.initialisedPluginList.regions) {\r\n                        this.initPlugin('regions');\r\n                    }\r\n                    return this.regions.add(options);\r\n                },\r\n\r\n                clearRegions() {\r\n                    this.regions && this.regions.clear();\r\n                },\r\n\r\n                enableDragSelection(options) {\r\n                    if (!this.initialisedPluginList.regions) {\r\n                        this.initPlugin('regions');\r\n                    }\r\n                    this.regions.enableDragSelection(options);\r\n                },\r\n\r\n                disableDragSelection() {\r\n                    this.regions.disableDragSelection();\r\n                }\r\n            },\r\n            instance: RegionsPlugin\r\n        };\r\n    }\r\n\r\n    constructor(params, ws) {\r\n        this.params = params;\r\n        this.wavesurfer = ws;\r\n        this.util = {\r\n            ...ws.util,\r\n            getRegionSnapToGridValue: value => {\r\n                return this.getRegionSnapToGridValue(value, params);\r\n            }\r\n        };\r\n        this.maxRegions = params.maxRegions;\r\n        this.regionsMinLength = params.regionsMinLength || null;\r\n\r\n        // turn the plugin instance into an observer\r\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\r\n            this.util.Observer.prototype\r\n        );\r\n        observerPrototypeKeys.forEach(key => {\r\n            Region.prototype[key] = this.util.Observer.prototype[key];\r\n        });\r\n        this.wavesurfer.Region = Region;\r\n\r\n        this._onBackendCreated = () => {\r\n            this.wrapper = this.wavesurfer.drawer.wrapper;\r\n            if (this.params.regions) {\r\n                this.params.regions.forEach(region => {\r\n                    region.edgeScrollWidth = this.params.edgeScrollWidth || this.wrapper.clientWidth * 0.05;\r\n                    this.add(region);\r\n                });\r\n            }\r\n        };\r\n\r\n        // Id-based hash of regions\r\n        this.list = {};\r\n        this._onReady = () => {\r\n            this.wrapper = this.wavesurfer.drawer.wrapper;\r\n            if (this.params.dragSelection) {\r\n                this.enableDragSelection(this.params);\r\n            }\r\n            Object.keys(this.list).forEach(id => {\r\n                this.list[id].updateRender();\r\n            });\r\n        };\r\n    }\r\n\r\n    init() {\r\n        // Check if ws is ready\r\n        if (this.wavesurfer.isReady) {\r\n            this._onBackendCreated();\r\n            this._onReady();\r\n        } else {\r\n            this.wavesurfer.once('ready', this._onReady);\r\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.wavesurfer.un('ready', this._onReady);\r\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\r\n        this.disableDragSelection();\r\n        this.clear();\r\n    }\r\n\r\n    /**\r\n     * check to see if adding a new region would exceed maxRegions\r\n     * @return {boolean} whether we should proceed and create a region\r\n     * @private\r\n     */\r\n    wouldExceedMaxRegions() {\r\n        return (\r\n            this.maxRegions && Object.keys(this.list).length >= this.maxRegions\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Add a region\r\n     *\r\n     * @param {object} params Region parameters\r\n     * @return {Region} The created region\r\n     */\r\n    add(params) {\r\n        if (this.wouldExceedMaxRegions()) return null;\r\n\r\n        if (!params.minLength && this.regionsMinLength) {\r\n            params = {...params, minLength: this.regionsMinLength};\r\n        }\r\n\r\n        const region = new this.wavesurfer.Region(params, this.util, this.wavesurfer);\r\n\r\n        this.list[region.id] = region;\r\n\r\n        region.on('remove', () => {\r\n            delete this.list[region.id];\r\n        });\r\n\r\n        return region;\r\n    }\r\n\r\n    /**\r\n     * Remove all regions\r\n     */\r\n    clear() {\r\n        Object.keys(this.list).forEach(id => {\r\n            this.list[id].remove();\r\n        });\r\n    }\r\n\r\n    enableDragSelection(params) {\r\n        this.disableDragSelection();\r\n\r\n        const slop = params.slop || 2;\r\n        const container = this.wavesurfer.drawer.container;\r\n        const scroll =\r\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\r\n        const scrollSpeed = params.scrollSpeed || 1;\r\n        const scrollThreshold = params.scrollThreshold || 10;\r\n        let drag;\r\n        let duration = this.wavesurfer.getDuration();\r\n        let maxScroll;\r\n        let start;\r\n        let region;\r\n        let touchId;\r\n        let pxMove = 0;\r\n        let scrollDirection;\r\n        let wrapperRect;\r\n\r\n        // Scroll when the user is dragging within the threshold\r\n        const edgeScroll = e => {\r\n            if (!region || !scrollDirection) {\r\n                return;\r\n            }\r\n\r\n            // Update scroll position\r\n            let scrollLeft =\r\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\r\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\r\n                maxScroll,\r\n                Math.max(0, scrollLeft)\r\n            );\r\n\r\n            // Update range\r\n            const end = this.wavesurfer.drawer.handleEvent(e);\r\n            region.update({\r\n                start: Math.min(end * duration, start * duration),\r\n                end: Math.max(end * duration, start * duration)\r\n            });\r\n\r\n            // Check that there is more to scroll and repeat\r\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\r\n                window.requestAnimationFrame(() => {\r\n                    edgeScroll(e);\r\n                });\r\n            }\r\n        };\r\n\r\n        const eventDown = e => {\r\n            if (e.touches && e.touches.length > 1) {\r\n                return;\r\n            }\r\n            duration = this.wavesurfer.getDuration();\r\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\r\n\r\n            // Store for scroll calculations\r\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\r\n            wrapperRect = this.wrapper.getBoundingClientRect();\r\n\r\n            drag = true;\r\n            start = this.wavesurfer.drawer.handleEvent(e, true);\r\n            region = null;\r\n            scrollDirection = null;\r\n        };\r\n        this.wrapper.addEventListener('mousedown', eventDown);\r\n        this.wrapper.addEventListener('touchstart', eventDown);\r\n        this.on('disable-drag-selection', () => {\r\n            this.wrapper.removeEventListener('touchstart', eventDown);\r\n            this.wrapper.removeEventListener('mousedown', eventDown);\r\n        });\r\n\r\n        const eventUp = e => {\r\n            if (e.touches && e.touches.length > 1) {\r\n                return;\r\n            }\r\n\r\n            drag = false;\r\n            pxMove = 0;\r\n            scrollDirection = null;\r\n\r\n            if (region) {\r\n                this.util.preventClick();\r\n                region.fireEvent('update-end', e);\r\n                this.wavesurfer.fireEvent('region-update-end', region, e);\r\n            }\r\n\r\n            region = null;\r\n        };\r\n        this.wrapper.addEventListener('mouseup', eventUp);\r\n        this.wrapper.addEventListener('touchend', eventUp);\r\n\r\n        document.body.addEventListener('mouseup', eventUp);\r\n        document.body.addEventListener('touchend', eventUp);\r\n        this.on('disable-drag-selection', () => {\r\n            document.body.removeEventListener('mouseup', eventUp);\r\n            document.body.removeEventListener('touchend', eventUp);\r\n            this.wrapper.removeEventListener('touchend', eventUp);\r\n            this.wrapper.removeEventListener('mouseup', eventUp);\r\n        });\r\n\r\n        const eventMove = e => {\r\n            if (!drag) {\r\n                return;\r\n            }\r\n            if (++pxMove <= slop) {\r\n                return;\r\n            }\r\n\r\n            if (e.touches && e.touches.length > 1) {\r\n                return;\r\n            }\r\n            if (e.targetTouches && e.targetTouches[0].identifier != touchId) {\r\n                return;\r\n            }\r\n\r\n            // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\r\n            if (!region) {\r\n                region = this.add(params || {});\r\n                if (!region) return;\r\n            }\r\n\r\n            const end = this.wavesurfer.drawer.handleEvent(e);\r\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\r\n                start * duration\r\n            );\r\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\r\n                end * duration\r\n            );\r\n            region.update({\r\n                start: Math.min(endUpdate, startUpdate),\r\n                end: Math.max(endUpdate, startUpdate)\r\n            });\r\n\r\n            // If scrolling is enabled\r\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\r\n                // Check threshold based on mouse\r\n                const x = e.clientX - wrapperRect.left;\r\n                if (x <= scrollThreshold) {\r\n                    scrollDirection = -1;\r\n                } else if (x >= wrapperRect.right - scrollThreshold) {\r\n                    scrollDirection = 1;\r\n                } else {\r\n                    scrollDirection = null;\r\n                }\r\n                scrollDirection && edgeScroll(e);\r\n            }\r\n        };\r\n        this.wrapper.addEventListener('mousemove', eventMove);\r\n        this.wrapper.addEventListener('touchmove', eventMove);\r\n        this.on('disable-drag-selection', () => {\r\n            this.wrapper.removeEventListener('touchmove', eventMove);\r\n            this.wrapper.removeEventListener('mousemove', eventMove);\r\n        });\r\n\r\n        this.wavesurfer.on('region-created', region => {\r\n            if (this.regionsMinLength) {\r\n                region.minLength = this.regionsMinLength;\r\n            }\r\n        });\r\n    }\r\n\r\n    disableDragSelection() {\r\n        this.fireEvent('disable-drag-selection');\r\n    }\r\n\r\n    /**\r\n     * Get current region\r\n     *\r\n     * The smallest region that contains the current time. If several such\r\n     * regions exist, take the first. Return `null` if none exist.\r\n     *\r\n     * @returns {Region} The current region\r\n     */\r\n    getCurrentRegion() {\r\n        const time = this.wavesurfer.getCurrentTime();\r\n        let min = null;\r\n        Object.keys(this.list).forEach(id => {\r\n            const cur = this.list[id];\r\n            if (cur.start <= time && cur.end >= time) {\r\n                if (!min || cur.end - cur.start < min.end - min.start) {\r\n                    min = cur;\r\n                }\r\n            }\r\n        });\r\n\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * Match the value to the grid, if required\r\n     *\r\n     * If the regions plugin params have a snapToGridInterval set, return the\r\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\r\n     * the passed value will be returned without modification.\r\n     *\r\n     * @param {number} value the value to snap to the grid, if needed\r\n     * @param {Object} params the regions plugin params\r\n     * @returns {number} value\r\n     */\r\n    getRegionSnapToGridValue(value, params) {\r\n        if (params.snapToGridInterval) {\r\n            // the regions should snap to a grid\r\n            const offset = params.snapToGridOffset || 0;\r\n            return (\r\n                Math.round((value - offset) / params.snapToGridInterval) *\r\n                    params.snapToGridInterval +\r\n                offset\r\n            );\r\n        }\r\n\r\n        // no snap-to-grid\r\n        return value;\r\n    }\r\n}\r\n","/**\r\n *  @since 4.0.0\r\n *\r\n * (Single) Region plugin class\r\n *\r\n * Must be turned into an observer before instantiating. This is done in\r\n * `RegionsPlugin` (main plugin class).\r\n *\r\n * @extends {Observer}\r\n */\r\nexport class Region {\r\n    constructor(params, regionsUtils, ws) {\r\n        this.wavesurfer = ws;\r\n        this.wrapper = ws.drawer.wrapper;\r\n        this.util = ws.util;\r\n        this.style = this.util.style;\r\n        this.regionsUtil = regionsUtils;\r\n\r\n        this.id = params.id == null ? ws.util.getId() : params.id;\r\n        this.start = Number(params.start) || 0;\r\n        this.end =\r\n            params.end == null\r\n                ? // small marker-like region\r\n                this.start +\r\n                (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\r\n                : Number(params.end);\r\n        this.resize =\r\n            params.resize === undefined ? true : Boolean(params.resize);\r\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\r\n        // reflect resize and drag state of region for region-updated listener\r\n        this.isResizing = false;\r\n        this.isDragging = false;\r\n        this.loop = Boolean(params.loop);\r\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\r\n        // The left and right handleStyle properties can be set to 'none' for\r\n        // no styling or can be assigned an object containing CSS properties.\r\n        this.handleStyle = params.handleStyle || {\r\n            left: {},\r\n            right: {}\r\n        };\r\n        this.handleLeftEl = null;\r\n        this.handleRightEl = null;\r\n        this.data = params.data || {};\r\n        this.attributes = params.attributes || {};\r\n\r\n        this.maxLength = params.maxLength;\r\n        // It assumes the minLength parameter value, or the regionsMinLength parameter value, if the first one not provided\r\n        this.minLength = params.minLength;\r\n        this._onRedraw = () => this.updateRender();\r\n\r\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\r\n        this.scrollSpeed = params.scrollSpeed || 1;\r\n        this.scrollThreshold = params.scrollThreshold || 10;\r\n        // Determines whether the context menu is prevented from being opened.\r\n        this.preventContextMenu =\r\n            params.preventContextMenu === undefined\r\n                ? false\r\n                : Boolean(params.preventContextMenu);\r\n\r\n        // select channel ID to set region\r\n        let channelIdx =\r\n            params.channelIdx == null ? -1 : parseInt(params.channelIdx);\r\n        this.regionHeight = '100%';\r\n        this.marginTop = '0px';\r\n\r\n        if (channelIdx !== -1) {\r\n            let channelCount =\r\n                this.wavesurfer.backend.buffer != null\r\n                    ? this.wavesurfer.backend.buffer.numberOfChannels\r\n                    : -1;\r\n            if (channelCount >= 0 && channelIdx < channelCount) {\r\n                this.regionHeight = Math.floor((1 / channelCount) * 100) + '%';\r\n                this.marginTop =\r\n                    this.wavesurfer.getHeight() * channelIdx + 'px';\r\n            }\r\n        }\r\n\r\n        this.formatTimeCallback = params.formatTimeCallback;\r\n        this.edgeScrollWidth = params.edgeScrollWidth;\r\n        this.bindInOut();\r\n        this.render();\r\n        this.wavesurfer.on('zoom', this._onRedraw);\r\n        this.wavesurfer.on('redraw', this._onRedraw);\r\n        this.wavesurfer.fireEvent('region-created', this);\r\n    }\r\n\r\n    /* Update region params. */\r\n    update(params) {\r\n        if (params.start != null) {\r\n            this.start = Number(params.start);\r\n        }\r\n        if (params.end != null) {\r\n            this.end = Number(params.end);\r\n        }\r\n        if (params.loop != null) {\r\n            this.loop = Boolean(params.loop);\r\n        }\r\n        if (params.color != null) {\r\n            this.color = params.color;\r\n        }\r\n        if (params.handleStyle != null) {\r\n            this.handleStyle = params.handleStyle;\r\n        }\r\n        if (params.data != null) {\r\n            this.data = params.data;\r\n        }\r\n        if (params.resize != null) {\r\n            this.resize = Boolean(params.resize);\r\n            this.updateHandlesResize(this.resize);\r\n        }\r\n        if (params.drag != null) {\r\n            this.drag = Boolean(params.drag);\r\n        }\r\n        if (params.maxLength != null) {\r\n            this.maxLength = Number(params.maxLength);\r\n        }\r\n        if (params.minLength != null) {\r\n            this.minLength = Number(params.minLength);\r\n        }\r\n        if (params.attributes != null) {\r\n            this.attributes = params.attributes;\r\n        }\r\n\r\n        this.updateRender();\r\n        this.fireEvent('update');\r\n        this.wavesurfer.fireEvent('region-updated', this);\r\n    }\r\n\r\n    /* Remove a single region. */\r\n    remove() {\r\n        if (this.element) {\r\n            this.wrapper.removeChild(this.element);\r\n            this.element = null;\r\n            this.fireEvent('remove');\r\n            this.wavesurfer.un('zoom', this._onRedraw);\r\n            this.wavesurfer.un('redraw', this._onRedraw);\r\n            this.wavesurfer.fireEvent('region-removed', this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Play the audio region.\r\n     * @param {number} start Optional offset to start playing at\r\n     */\r\n    play(start) {\r\n        const s = start || this.start;\r\n        this.wavesurfer.play(s, this.end);\r\n        this.fireEvent('play');\r\n        this.wavesurfer.fireEvent('region-play', this);\r\n    }\r\n\r\n    /**\r\n     * Play the audio region in a loop.\r\n     * @param {number} start Optional offset to start playing at\r\n     * */\r\n    playLoop(start) {\r\n        this.loop = true;\r\n        this.play(start);\r\n    }\r\n\r\n    /**\r\n     * Set looping on/off.\r\n     * @param {boolean} loop True if should play in loop\r\n     */\r\n    setLoop(loop) {\r\n        this.loop = loop;\r\n    }\r\n\r\n    /* Render a region as a DOM element. */\r\n    render() {\r\n        const regionEl = document.createElement('region');\r\n\r\n        regionEl.className = 'wavesurfer-region';\r\n        regionEl.title = this.formatTime(this.start, this.end);\r\n        regionEl.setAttribute('data-id', this.id);\r\n\r\n        for (const attrname in this.attributes) {\r\n            regionEl.setAttribute(\r\n                'data-region-' + attrname,\r\n                this.attributes[attrname]\r\n            );\r\n        }\r\n\r\n        this.style(regionEl, {\r\n            position: 'absolute',\r\n            zIndex: 2,\r\n            height: this.regionHeight,\r\n            top: this.marginTop\r\n        });\r\n\r\n        /* Resize handles */\r\n        if (this.resize) {\r\n            this.handleLeftEl = regionEl.appendChild(\r\n                document.createElement('handle')\r\n            );\r\n            this.handleRightEl = regionEl.appendChild(\r\n                document.createElement('handle')\r\n            );\r\n\r\n            this.handleLeftEl.className = 'wavesurfer-handle wavesurfer-handle-start';\r\n            this.handleRightEl.className = 'wavesurfer-handle wavesurfer-handle-end';\r\n\r\n            // Default CSS properties for both handles.\r\n            const css = {\r\n                cursor: 'col-resize',\r\n                position: 'absolute',\r\n                top: '0px',\r\n                width: '2px',\r\n                height: '100%',\r\n                backgroundColor: 'rgba(0, 0, 0, 1)'\r\n            };\r\n\r\n            // Merge CSS properties per handle.\r\n            const handleLeftCss =\r\n                this.handleStyle.left !== 'none'\r\n                    ? Object.assign({ left: '0px' }, css, this.handleStyle.left)\r\n                    : null;\r\n            const handleRightCss =\r\n                this.handleStyle.right !== 'none'\r\n                    ? Object.assign(\r\n                        { right: '0px' },\r\n                        css,\r\n                        this.handleStyle.right\r\n                    )\r\n                    : null;\r\n\r\n            if (handleLeftCss) {\r\n                this.style(this.handleLeftEl, handleLeftCss);\r\n            }\r\n\r\n            if (handleRightCss) {\r\n                this.style(this.handleRightEl, handleRightCss);\r\n            }\r\n        }\r\n\r\n        this.element = this.wrapper.appendChild(regionEl);\r\n        this.updateRender();\r\n        this.bindEvents(regionEl);\r\n    }\r\n\r\n    formatTime(start, end) {\r\n        if (this.formatTimeCallback) {\r\n            return this.formatTimeCallback(start, end);\r\n        }\r\n        return (start == end ? [start] : [start, end])\r\n            .map((time) =>\r\n                [\r\n                    Math.floor((time % 3600) / 60), // minutes\r\n                    ('00' + Math.floor(time % 60)).slice(-2) // seconds\r\n                ].join(':')\r\n            )\r\n            .join('-');\r\n    }\r\n\r\n    getWidth() {\r\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\r\n    }\r\n\r\n    /* Update element's position, width, color. */\r\n    updateRender() {\r\n        // duration varies during loading process, so don't overwrite important data\r\n        const dur = this.wavesurfer.getDuration();\r\n        const width = this.getWidth();\r\n\r\n        let startLimited = this.start;\r\n        let endLimited = this.end;\r\n        if (startLimited < 0) {\r\n            startLimited = 0;\r\n            endLimited = endLimited - startLimited;\r\n        }\r\n        if (endLimited > dur) {\r\n            endLimited = dur;\r\n            startLimited = dur - (endLimited - startLimited);\r\n        }\r\n\r\n        if (this.minLength != null) {\r\n            endLimited = Math.max(startLimited + this.minLength, endLimited);\r\n        }\r\n\r\n        if (this.maxLength != null) {\r\n            endLimited = Math.min(startLimited + this.maxLength, endLimited);\r\n        }\r\n\r\n        if (this.element != null) {\r\n            // Calculate the left and width values of the region such that\r\n            // no gaps appear between regions.\r\n            const left = Math.round((startLimited / dur) * width);\r\n            const regionWidth = Math.round((endLimited / dur) * width) - left;\r\n\r\n            this.style(this.element, {\r\n                left: left + 'px',\r\n                width: regionWidth + 'px',\r\n                backgroundColor: this.color,\r\n                cursor: this.drag ? 'move' : 'default'\r\n            });\r\n\r\n            for (const attrname in this.attributes) {\r\n                this.element.setAttribute(\r\n                    'data-region-' + attrname,\r\n                    this.attributes[attrname]\r\n                );\r\n            }\r\n\r\n            this.element.title = this.formatTime(this.start, this.end);\r\n        }\r\n    }\r\n\r\n    /* Bind audio events. */\r\n    bindInOut() {\r\n        this.firedIn = false;\r\n        this.firedOut = false;\r\n\r\n        const onProcess = (time) => {\r\n            let start = Math.round(this.start * 10) / 10;\r\n            let end = Math.round(this.end * 10) / 10;\r\n            time = Math.round(time * 10) / 10;\r\n\r\n            if (\r\n                !this.firedOut &&\r\n                this.firedIn &&\r\n                (start > time || end <= time)\r\n            ) {\r\n                this.firedOut = true;\r\n                this.firedIn = false;\r\n                this.fireEvent('out');\r\n                this.wavesurfer.fireEvent('region-out', this);\r\n            }\r\n            if (!this.firedIn && start <= time && end > time) {\r\n                this.firedIn = true;\r\n                this.firedOut = false;\r\n                this.fireEvent('in');\r\n                this.wavesurfer.fireEvent('region-in', this);\r\n            }\r\n        };\r\n\r\n        this.wavesurfer.backend.on('audioprocess', onProcess);\r\n\r\n        this.on('remove', () => {\r\n            this.wavesurfer.backend.un('audioprocess', onProcess);\r\n        });\r\n\r\n        /* Loop playback. */\r\n        this.on('out', () => {\r\n            if (this.loop) {\r\n                const realTime = this.wavesurfer.getCurrentTime();\r\n                if (realTime >= this.start && realTime <= this.end) {\r\n                    this.wavesurfer.play(this.start);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /* Bind DOM events. */\r\n    bindEvents() {\r\n        const preventContextMenu = this.preventContextMenu;\r\n\r\n        this.element.addEventListener('mouseenter', (e) => {\r\n            this.fireEvent('mouseenter', e);\r\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\r\n        });\r\n\r\n        this.element.addEventListener('mouseleave', (e) => {\r\n            this.fireEvent('mouseleave', e);\r\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\r\n        });\r\n\r\n        this.element.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            this.fireEvent('click', e);\r\n            this.wavesurfer.fireEvent('region-click', this, e);\r\n        });\r\n\r\n        this.element.addEventListener('dblclick', (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            this.fireEvent('dblclick', e);\r\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\r\n        });\r\n\r\n        this.element.addEventListener('contextmenu', (e) => {\r\n            if (preventContextMenu) {\r\n                e.preventDefault();\r\n            }\r\n            this.fireEvent('contextmenu', e);\r\n            this.wavesurfer.fireEvent('region-contextmenu', this, e);\r\n        });\r\n\r\n        /* Drag or resize on mousemove. */\r\n        if (this.drag || this.resize) {\r\n            this.bindDragEvents();\r\n        }\r\n    }\r\n\r\n    bindDragEvents() {\r\n        const container = this.wavesurfer.drawer.container;\r\n        const scrollSpeed = this.scrollSpeed;\r\n        const scrollThreshold = this.scrollThreshold;\r\n        let startTime;\r\n        let touchId;\r\n        let drag;\r\n        let maxScroll;\r\n        let resize;\r\n        let updated = false;\r\n        let scrollDirection;\r\n        let wrapperRect;\r\n        let regionLeftHalfTime;\r\n        let regionRightHalfTime;\r\n\r\n        // Scroll when the user is dragging within the threshold\r\n        const edgeScroll = (e) => {\r\n            const duration = this.wavesurfer.getDuration();\r\n            if (!scrollDirection || (!drag && !resize)) {\r\n                return;\r\n            }\r\n\r\n            const x = e.clientX;\r\n            let distanceBetweenCursorAndWrapperEdge = 0;\r\n            let regionHalfTimeWidth = 0;\r\n            let adjustment = 0;\r\n\r\n            // Get the currently selected time according to the mouse position\r\n            let time = this.regionsUtil.getRegionSnapToGridValue(\r\n                this.wavesurfer.drawer.handleEvent(e) * duration\r\n            );\r\n\r\n            if (drag) {\r\n                // Considering the point of contact with the region while edgescrolling\r\n                if (scrollDirection === -1) {\r\n                    regionHalfTimeWidth = regionLeftHalfTime * this.wavesurfer.params.minPxPerSec;\r\n                    distanceBetweenCursorAndWrapperEdge = x - wrapperRect.left;\r\n                } else {\r\n                    regionHalfTimeWidth = regionRightHalfTime * this.wavesurfer.params.minPxPerSec;\r\n                    distanceBetweenCursorAndWrapperEdge = wrapperRect.right - x;\r\n                }\r\n            } else {\r\n                // Considering minLength while edgescroll\r\n                let minLength = this.minLength;\r\n                if (!minLength) {\r\n                    minLength = 0;\r\n                }\r\n\r\n                if (resize === 'start') {\r\n                    if (time > this.end - minLength) {\r\n                        time = this.end - minLength;\r\n                        adjustment = scrollSpeed * scrollDirection;\r\n                    }\r\n\r\n                    if (time < 0) {\r\n                        time = 0;\r\n                    }\r\n                } else if (resize === 'end') {\r\n                    if (time < this.start + minLength) {\r\n                        time = this.start + minLength;\r\n                        adjustment = scrollSpeed * scrollDirection;\r\n                    }\r\n\r\n                    if (time > duration) {\r\n                        time = duration;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Don't edgescroll if region has reached min or max limit\r\n            if (scrollDirection === -1) {\r\n                if (Math.round(this.wrapper.scrollLeft) === 0) {\r\n                    return;\r\n                }\r\n\r\n                if (Math.round(this.wrapper.scrollLeft - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge) <= 0) {\r\n                    return;\r\n                }\r\n            } else {\r\n                if (Math.round(this.wrapper.scrollLeft) === maxScroll) {\r\n                    return;\r\n                }\r\n\r\n                if (Math.round(this.wrapper.scrollLeft + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge) >= maxScroll) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Update scroll position\r\n            let scrollLeft = this.wrapper.scrollLeft - adjustment + scrollSpeed * scrollDirection;\r\n\r\n            if (scrollDirection === -1) {\r\n                const calculatedLeft = Math.max(0 + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge, scrollLeft);\r\n                this.wrapper.scrollLeft = scrollLeft = calculatedLeft;\r\n            } else {\r\n                const calculatedRight = Math.min(maxScroll - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge, scrollLeft);\r\n                this.wrapper.scrollLeft = scrollLeft = calculatedRight;\r\n            }\r\n\r\n            const delta = time - startTime;\r\n            startTime = time;\r\n\r\n            // Continue dragging or resizing\r\n            drag ? this.onDrag(delta) : this.onResize(delta, resize);\r\n\r\n            // Repeat\r\n            window.requestAnimationFrame(() => {\r\n                edgeScroll(e);\r\n            });\r\n        };\r\n\r\n        const onDown = (e) => {\r\n            const duration = this.wavesurfer.getDuration();\r\n            if (e.touches && e.touches.length > 1) {\r\n                return;\r\n            }\r\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\r\n\r\n            // stop the event propagation, if this region is resizable or draggable\r\n            // and the event is therefore handled here.\r\n            if (this.drag || this.resize) {\r\n                e.stopPropagation();\r\n            }\r\n\r\n            // Store the selected startTime we begun dragging or resizing\r\n            startTime = this.regionsUtil.getRegionSnapToGridValue(\r\n                this.wavesurfer.drawer.handleEvent(e, true) * duration\r\n            );\r\n\r\n            // Store the selected point of contact when we begin dragging\r\n            regionLeftHalfTime = startTime - this.start;\r\n            regionRightHalfTime = this.end - startTime;\r\n\r\n            // Store for scroll calculations\r\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\r\n            wrapperRect = this.wrapper.getBoundingClientRect();\r\n\r\n            this.isResizing = false;\r\n            this.isDragging = false;\r\n            if (e.target.tagName.toLowerCase() === 'handle') {\r\n                this.isResizing = true;\r\n                resize = e.target.classList.contains('wavesurfer-handle-start')\r\n                    ? 'start'\r\n                    : 'end';\r\n            } else {\r\n                this.isDragging = true;\r\n                drag = true;\r\n                resize = false;\r\n            }\r\n        };\r\n        const onUp = (e) => {\r\n            if (e.touches && e.touches.length > 1) {\r\n                return;\r\n            }\r\n\r\n            if (drag || resize) {\r\n                this.isDragging = false;\r\n                this.isResizing = false;\r\n                drag = false;\r\n                scrollDirection = null;\r\n                resize = false;\r\n            }\r\n\r\n            if (updated) {\r\n                updated = false;\r\n                this.util.preventClick();\r\n                this.fireEvent('update-end', e);\r\n                this.wavesurfer.fireEvent('region-update-end', this, e);\r\n            }\r\n        };\r\n        const onMove = (e) => {\r\n            const duration = this.wavesurfer.getDuration();\r\n\r\n            if (e.touches && e.touches.length > 1) {\r\n                return;\r\n            }\r\n            if (e.targetTouches && e.targetTouches[0].identifier != touchId) {\r\n                return;\r\n            }\r\n            if (!drag && !resize) {\r\n                return;\r\n            }\r\n\r\n            const oldTime = startTime;\r\n            let time = this.regionsUtil.getRegionSnapToGridValue(\r\n                this.wavesurfer.drawer.handleEvent(e) * duration\r\n            );\r\n\r\n            if (drag) {\r\n                // To maintain relative cursor start point while dragging\r\n                const maxEnd = this.wavesurfer.getDuration();\r\n                if (time > maxEnd - regionRightHalfTime) {\r\n                    time = maxEnd - regionRightHalfTime;\r\n                }\r\n\r\n                if (time - regionLeftHalfTime < 0) {\r\n                    time = regionLeftHalfTime;\r\n                }\r\n            }\r\n\r\n            if (resize) {\r\n                // To maintain relative cursor start point while resizing\r\n                // we have to handle for minLength\r\n                let minLength = this.minLength;\r\n                if (!minLength) {\r\n                    minLength = 0;\r\n                }\r\n\r\n                if (resize === 'start') {\r\n                    if (time > this.end - minLength) {\r\n                        time = this.end - minLength;\r\n                    }\r\n\r\n                    if (time < 0) {\r\n                        time = 0;\r\n                    }\r\n                } else if (resize === 'end') {\r\n                    if (time < this.start + minLength) {\r\n                        time = this.start + minLength;\r\n                    }\r\n\r\n                    if (time > duration) {\r\n                        time = duration;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let delta = time - startTime;\r\n            startTime = time;\r\n\r\n            // Drag\r\n            if (this.drag && drag) {\r\n                updated = updated || !!delta;\r\n                this.onDrag(delta);\r\n            }\r\n\r\n            // Resize\r\n            if (this.resize && resize) {\r\n                updated = updated || !!delta;\r\n                this.onResize(delta, resize);\r\n            }\r\n\r\n            if (\r\n                this.scroll &&\r\n                container.clientWidth < this.wrapper.scrollWidth\r\n            ) {\r\n                // Triggering edgescroll from within edgeScrollWidth\r\n                if (drag) {\r\n                    let x = e.clientX;\r\n\r\n                    // Check direction\r\n                    if (x < wrapperRect.left + this.edgeScrollWidth) {\r\n                        scrollDirection = -1;\r\n                    } else if (x > wrapperRect.right - this.edgeScrollWidth) {\r\n                        scrollDirection = 1;\r\n                    } else {\r\n                        scrollDirection = null;\r\n                    }\r\n                } else {\r\n                    let x = e.clientX;\r\n\r\n                    // Check direction\r\n                    if (x < wrapperRect.left + this.edgeScrollWidth) {\r\n                        scrollDirection = -1;\r\n                    } else if (x > wrapperRect.right - this.edgeScrollWidth) {\r\n                        scrollDirection = 1;\r\n                    } else {\r\n                        scrollDirection = null;\r\n                    }\r\n                }\r\n\r\n                if (scrollDirection) {\r\n                    edgeScroll(e);\r\n                }\r\n            }\r\n        };\r\n\r\n        this.element.addEventListener('mousedown', onDown);\r\n        this.element.addEventListener('touchstart', onDown);\r\n\r\n        document.body.addEventListener('mousemove', onMove);\r\n        document.body.addEventListener('touchmove', onMove);\r\n\r\n        document.body.addEventListener('mouseup', onUp);\r\n        document.body.addEventListener('touchend', onUp);\r\n\r\n        this.on('remove', () => {\r\n            document.body.removeEventListener('mouseup', onUp);\r\n            document.body.removeEventListener('touchend', onUp);\r\n            document.body.removeEventListener('mousemove', onMove);\r\n            document.body.removeEventListener('touchmove', onMove);\r\n        });\r\n\r\n        this.wavesurfer.on('destroy', () => {\r\n            document.body.removeEventListener('mouseup', onUp);\r\n            document.body.removeEventListener('touchend', onUp);\r\n        });\r\n    }\r\n\r\n    onDrag(delta) {\r\n        const maxEnd = this.wavesurfer.getDuration();\r\n        if (this.end + delta > maxEnd) {\r\n            delta = maxEnd - this.end;\r\n        }\r\n\r\n        if (this.start + delta < 0) {\r\n            delta = this.start * -1;\r\n        }\r\n\r\n        this.update({\r\n            start: this.start + delta,\r\n            end: this.end + delta\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @example\r\n     * onResize(-5, 'start') // Moves the start point 5 seconds back\r\n     * onResize(0.5, 'end') // Moves the end point 0.5 seconds forward\r\n     *\r\n     * @param {number} delta How much to add or subtract, given in seconds\r\n     * @param {string} direction 'start 'or 'end'\r\n     */\r\n    onResize(delta, direction) {\r\n        const duration = this.wavesurfer.getDuration();\r\n        if (direction === 'start') {\r\n            // Check if changing the start by the given delta would result in the region being smaller than minLength\r\n            // Ignore cases where we are making the region wider rather than shrinking it\r\n            if (delta > 0 && this.end - (this.start + delta) < this.minLength) {\r\n                delta = this.end - this.minLength - this.start;\r\n            }\r\n\r\n            if (delta < 0 && (this.start + delta) < 0) {\r\n                delta = this.start * -1;\r\n            }\r\n\r\n            this.update({\r\n                start: Math.min(this.start + delta, this.end),\r\n                end: Math.max(this.start + delta, this.end)\r\n            });\r\n        } else {\r\n            // Check if changing the end by the given delta would result in the region being smaller than minLength\r\n            // Ignore cases where we are making the region wider rather than shrinking it\r\n            if (delta < 0 && this.end + delta - this.start < this.minLength) {\r\n                delta = this.start + this.minLength - this.end;\r\n            }\r\n\r\n            if (delta > 0 && (this.end + delta) > duration) {\r\n                delta = duration - this.end;\r\n            }\r\n\r\n            this.update({\r\n                start: Math.min(this.end + delta, this.start),\r\n                end: Math.max(this.end + delta, this.start)\r\n            });\r\n        }\r\n    }\r\n\r\n    updateHandlesResize(resize) {\r\n        const cursorStyle = resize ? 'col-resize' : 'auto';\r\n\r\n        this.handleLeftEl && this.style(this.handleLeftEl, { cursor: cursorStyle });\r\n        this.handleRightEl && this.style(this.handleRightEl, { cursor: cursorStyle });\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(23);\n"],"sourceRoot":""}