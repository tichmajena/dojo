{"version":3,"sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/./src/plugin/microphone/index.js","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/webpack/startup"],"names":["root","factory","exports","module","define","amd","this","MicrophonePlugin","params","ws","wavesurfer","active","paused","browser","detectBrowser","reloadBufferFunction","e","reloadBuffer","undefined","navigator","mediaDevices","getUserMedia","constraints","successCallback","errorCallback","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Promise","call","reject","Error","video","audio","bufferSize","numberOfInputChannels","numberOfOutputChannels","_onBackendCreated","micContext","backend","getAudioContext","name","deferInit","instance","on","un","stop","then","data","gotStream","catch","deviceError","pause","play","start","connect","disconnect","stopDevice","empty","stream","version","getTracks","forEach","localAudioBuffer","createBuffer","sampleRate","mediaStreamSource","createMediaStreamSource","levelChecker","createScriptProcessor","destination","onaudioprocess","event","channel","l","Math","min","numberOfChannels","inputBuffer","getChannelData","set","loadDecodedBuffer","fireEvent","code","uastring","expr","pos","match","length","parseInt","result","window","extractVersion","userAgent","minVersion","RTCPeerConnection","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":";;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,aAAc,GAAIH,GACC,iBAAZC,QACdA,QAAoB,WAAID,KAExBD,EAAiB,WAAIA,EAAiB,YAAK,GAAIA,EAAiB,WAAc,WAAIC,KARpF,CASGK,MAAM,WACT,M,2UC+BqBC,E,WAmBjB,WAAYC,EAAQC,GAAI,Y,4FAAA,SACpBH,KAAKE,OAASA,EACdF,KAAKI,WAAaD,EAElBH,KAAKK,QAAS,EACdL,KAAKM,QAAS,EACdN,KAAKO,QAAUP,KAAKQ,gBACpBR,KAAKS,qBAAuB,SAAAC,GAAC,OAAI,EAAKC,aAAaD,SAkCpBE,IAA3BC,UAAUC,eACVD,UAAUC,aAAe,SAMeF,IAAxCC,UAAUC,aAAaC,eACvBF,UAAUC,aAAaC,aAvCD,SACtBC,EACAC,EACAC,GAGA,IAAMH,EACFF,UAAUE,cACVF,UAAUM,oBACVN,UAAUO,iBACVP,UAAUQ,eAGd,OAAKN,EAOE,IAAIO,SAAQ,SAACL,EAAiBC,GACjCH,EAAaQ,KACTV,UACAG,EACAC,EACAC,MAXGI,QAAQE,OACX,IAAIC,MAAM,sDA0BtBzB,KAAKgB,YAAchB,KAAKE,OAAOc,aAAe,CAC1CU,OAAO,EACPC,OAAO,GAEX3B,KAAK4B,WAAa5B,KAAKE,OAAO0B,YAAc,KAC5C5B,KAAK6B,sBAAwB7B,KAAKE,OAAO2B,uBAAyB,EAClE7B,KAAK8B,uBAAyB9B,KAAKE,OAAO4B,wBAA0B,EAEpE9B,KAAK+B,kBAAoB,WAErB,EAAKC,WAAa,EAAK5B,WAAW6B,QAAQC,mB,8CAtEpChC,GACV,MAAO,CACHiC,KAAM,aACNC,aAAWlC,IAAUA,EAAOkC,YAAYlC,EAAOkC,UAC/ClC,OAAQA,EACRmC,SAAUpC,O,kCAsEdD,KAAKI,WAAWkC,GAAG,kBAAmBtC,KAAK+B,mBACvC/B,KAAKI,WAAW6B,SAChBjC,KAAK+B,sB,gCAUT/B,KAAKM,QAAS,EAEdN,KAAKI,WAAWmC,GAAG,kBAAmBvC,KAAK+B,mBAC3C/B,KAAKwC,S,8BAOD,WACJ3B,UAAUC,aACLC,aAAaf,KAAKgB,aAClByB,MAAK,SAAAC,GAAI,OAAI,EAAKC,UAAUD,MAC5BE,OAAM,SAAAF,GAAI,OAAI,EAAKG,YAAYH,Q,mCAO/B1C,KAAKK,QAKNL,KAAKM,QAAUN,KAAKM,OAEhBN,KAAKM,OACLN,KAAK8C,QAEL9C,KAAK+C,QART/C,KAAKgD,U,6BAiBThD,KAAKM,QAAS,EAEdN,KAAKiD,Y,8BAOLjD,KAAKM,QAAS,EAIdN,KAAKkD,e,6BAQDlD,KAAKK,SAELL,KAAKmD,aAGLnD,KAAKI,WAAWgD,W,mCAcpB,GANApD,KAAKK,QAAS,EAGdL,KAAKkD,aAGDlD,KAAKqD,OAAQ,CAIb,IAC8B,WAAzBrD,KAAKO,QAAQA,SACVP,KAAKO,QAAQ+C,SAAW,IACF,YAAzBtD,KAAKO,QAAQA,SACVP,KAAKO,QAAQ+C,SAAW,IACH,SAAzBtD,KAAKO,QAAQA,SACY,WAAzBP,KAAKO,QAAQA,UAETP,KAAKqD,OAAOE,UAGZ,YADAvD,KAAKqD,OAAOE,YAAYC,SAAQ,SAAAH,GAAM,OAAIA,EAAOb,UAKzDxC,KAAKqD,OAAOb,U,qCAQI5B,IAAhBZ,KAAKqD,SAEwB,SAAzBrD,KAAKO,QAAQA,UACbP,KAAKyD,iBAAmBzD,KAAKgC,WAAW0B,aACpC1D,KAAK6B,sBACL7B,KAAK4B,WACL5B,KAAKgC,WAAW2B,aAKxB3D,KAAK4D,kBAAoB5D,KAAKgC,WAAW6B,wBACrC7D,KAAKqD,QAGTrD,KAAK8D,aAAe9D,KAAKgC,WAAW+B,sBAChC/D,KAAK4B,WACL5B,KAAK6B,sBACL7B,KAAK8B,wBAET9B,KAAK4D,kBAAkBX,QAAQjD,KAAK8D,cAEpC9D,KAAK8D,aAAab,QAAQjD,KAAKgC,WAAWgC,aAC1ChE,KAAK8D,aAAaG,eAAiBjE,KAAKS,wB,wCAQbG,IAA3BZ,KAAK4D,mBACL5D,KAAK4D,kBAAkBV,kBAGDtC,IAAtBZ,KAAK8D,eACL9D,KAAK8D,aAAaZ,aAClBlD,KAAK8D,aAAaG,oBAAiBrD,QAGTA,IAA1BZ,KAAKyD,mBACLzD,KAAKyD,sBAAmB7C,K,mCASnBsD,GACT,IAAKlE,KAAKM,OAGN,GAFAN,KAAKI,WAAWgD,QAEa,SAAzBpD,KAAKO,QAAQA,QAAoB,CAGjC,IAAI4D,EAASC,EACb,IACID,EAAU,EACVC,EAAIC,KAAKC,IACLtE,KAAKyD,iBAAiBc,iBACtBL,EAAMM,YAAYD,kBAEtBJ,EAAUC,EACVD,IAEAnE,KAAKyD,iBACAgB,eAAeN,GACfO,IAAIR,EAAMM,YAAYC,eAAeN,IAG9CnE,KAAKI,WAAWuE,kBAAkB3E,KAAKyD,uBAEvCzD,KAAKI,WAAWuE,kBAAkBT,EAAMM,e,gCAU1CnB,GACNrD,KAAKqD,OAASA,EACdrD,KAAKK,QAAS,EAGdL,KAAK+C,OAGL/C,KAAK4E,UAAU,cAAevB,K,kCAQtBwB,GAER7E,KAAK4E,UAAU,cAAeC,K,qCAUnBC,EAAUC,EAAMC,GAC3B,IAAMC,EAAQH,EAASG,MAAMF,GAC7B,OAAOE,GAASA,EAAMC,QAAUF,GAAOG,SAASF,EAAMD,GAAM,M,sCAU5D,IAAMI,EAAS,CACfA,QAAiB,KACjBA,QAAiB,KACjBA,WAAoB,MAGpB,MAAsB,oBAAXC,QAA2BA,OAAOxE,UAKzCA,UAAUO,iBAEVgE,EAAO7E,QAAU,UACjB6E,EAAO9B,QAAUtD,KAAKsF,eAClBzE,UAAU0E,UACV,mBACA,GAEJH,EAAOI,WAAa,GACbJ,GACAvE,UAAUM,oBAEjBiE,EAAO7E,QAAU,SACjB6E,EAAO9B,QAAUtD,KAAKsF,eAClBzE,UAAU0E,UACV,wBACA,GAEJH,EAAOI,WAAa,GACbJ,GAEPvE,UAAUC,cACVD,UAAU0E,UAAUN,MAAM,uBAG1BG,EAAO7E,QAAU,OACjB6E,EAAO9B,QAAUtD,KAAKsF,eAClBzE,UAAU0E,UACV,qBACA,GAEJH,EAAOI,WAAa,MACbJ,GAEPC,OAAOI,mBACP5E,UAAU0E,UAAUN,MAAM,yBAG1BG,EAAO7E,QAAU,SACjB6E,EAAOI,WAAa,GACpBJ,EAAO9B,QAAUtD,KAAKsF,eAClBzE,UAAU0E,UACV,uBACA,GAEGH,IAIXA,EAAO7E,QAAU,2BACV6E,IAtDHA,EAAO7E,QAAU,2BACV6E,O,uCCxXfM,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUhG,QAG3C,IAAIC,EAAS6F,EAAyBE,GAAY,CAGjDhG,QAAS,IAOV,OAHAiG,EAAoBD,GAAU/F,EAAQA,EAAOD,QAAS+F,GAG/C9F,EAAOD,QCjBR+F,CAAoB,M","file":"wavesurfer.microphone.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"microphone\"] = factory();\n})(this, function() {\nreturn ","/**\r\n * @typedef {Object} MicrophonePluginParams\r\n * @property {MediaStreamConstraints} constraints The constraints parameter is a\r\n * MediaStreamConstaints object with two members: video and audio, describing\r\n * the media types requested. Either or both must be specified.\r\n * @property {number} bufferSize=4096 The buffer size in units of sample-frames.\r\n * If specified, the bufferSize must be one of the following values: `256`,\r\n * `512`, `1024`, `2048`, `4096`, `8192`, `16384`\r\n * @property {number} numberOfInputChannels=1 Integer specifying the number of\r\n * channels for this node's input. Values of up to 32 are supported.\r\n * @property {number} numberOfOutputChannels=1 Integer specifying the number of\r\n * channels for this node's output.\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * `initPlugin('microphone')`\r\n */\r\n\r\n/**\r\n * Visualize microphone input in a wavesurfer instance.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import MicrophonePlugin from 'wavesurfer.microphone.js';\r\n *\r\n * // commonjs\r\n * var MicrophonePlugin = require('wavesurfer.microphone.js');\r\n *\r\n * // if you are using <script> tags\r\n * var MicrophonePlugin = window.WaveSurfer.microphone;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     MicrophonePlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class MicrophonePlugin {\r\n    /**\r\n     * Microphone plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {MicrophonePluginParams} params parameters use to initialise the plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'microphone',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            instance: MicrophonePlugin\r\n        };\r\n    }\r\n\r\n    constructor(params, ws) {\r\n        this.params = params;\r\n        this.wavesurfer = ws;\r\n\r\n        this.active = false;\r\n        this.paused = false;\r\n        this.browser = this.detectBrowser();\r\n        this.reloadBufferFunction = e => this.reloadBuffer(e);\r\n\r\n        // cross-browser getUserMedia\r\n        const promisifiedOldGUM = (\r\n            constraints,\r\n            successCallback,\r\n            errorCallback\r\n        ) => {\r\n            // get a hold of getUserMedia, if present\r\n            const getUserMedia =\r\n                navigator.getUserMedia ||\r\n                navigator.webkitGetUserMedia ||\r\n                navigator.mozGetUserMedia ||\r\n                navigator.msGetUserMedia;\r\n            // Some browsers just don't implement it - return a rejected\r\n            // promise with an error to keep a consistent interface\r\n            if (!getUserMedia) {\r\n                return Promise.reject(\r\n                    new Error('getUserMedia is not implemented in this browser')\r\n                );\r\n            }\r\n            // otherwise, wrap the call to the old navigator.getUserMedia with\r\n            // a Promise\r\n            return new Promise((successCallback, errorCallback) => {\r\n                getUserMedia.call(\r\n                    navigator,\r\n                    constraints,\r\n                    successCallback,\r\n                    errorCallback\r\n                );\r\n            });\r\n        };\r\n        // Older browsers might not implement mediaDevices at all, so we set an\r\n        // empty object first\r\n        if (navigator.mediaDevices === undefined) {\r\n            navigator.mediaDevices = {};\r\n        }\r\n        // Some browsers partially implement mediaDevices. We can't just assign\r\n        // an object with getUserMedia as it would overwrite existing\r\n        // properties. Here, we will just add the getUserMedia property if it's\r\n        // missing.\r\n        if (navigator.mediaDevices.getUserMedia === undefined) {\r\n            navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\r\n        }\r\n        this.constraints = this.params.constraints || {\r\n            video: false,\r\n            audio: true\r\n        };\r\n        this.bufferSize = this.params.bufferSize || 4096;\r\n        this.numberOfInputChannels = this.params.numberOfInputChannels || 1;\r\n        this.numberOfOutputChannels = this.params.numberOfOutputChannels || 1;\r\n\r\n        this._onBackendCreated = () => {\r\n            // wavesurfer's AudioContext where we'll route the mic signal to\r\n            this.micContext = this.wavesurfer.backend.getAudioContext();\r\n        };\r\n    }\r\n\r\n    init() {\r\n        this.wavesurfer.on('backend-created', this._onBackendCreated);\r\n        if (this.wavesurfer.backend) {\r\n            this._onBackendCreated();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy the microphone plugin.\r\n     */\r\n    destroy() {\r\n        // make sure the buffer is not redrawn during\r\n        // cleanup and demolition of this plugin.\r\n        this.paused = true;\r\n\r\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\r\n        this.stop();\r\n    }\r\n\r\n    /**\r\n     * Allow user to select audio input device, e.g. microphone, and\r\n     * start the visualization.\r\n     */\r\n    start() {\r\n        navigator.mediaDevices\r\n            .getUserMedia(this.constraints)\r\n            .then(data => this.gotStream(data))\r\n            .catch(data => this.deviceError(data));\r\n    }\r\n\r\n    /**\r\n     * Pause/resume visualization.\r\n     */\r\n    togglePlay() {\r\n        if (!this.active) {\r\n            // start it first\r\n            this.start();\r\n        } else {\r\n            // toggle paused\r\n            this.paused = !this.paused;\r\n\r\n            if (this.paused) {\r\n                this.pause();\r\n            } else {\r\n                this.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Play visualization.\r\n     */\r\n    play() {\r\n        this.paused = false;\r\n\r\n        this.connect();\r\n    }\r\n\r\n    /**\r\n     * Pause visualization.\r\n     */\r\n    pause() {\r\n        this.paused = true;\r\n\r\n        // disconnect sources so they can be used elsewhere\r\n        // (eg. during audio playback)\r\n        this.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Stop the device stream and remove any remaining waveform drawing from\r\n     * the wavesurfer canvas.\r\n     */\r\n    stop() {\r\n        if (this.active) {\r\n            // stop visualization and device\r\n            this.stopDevice();\r\n\r\n            // empty last frame\r\n            this.wavesurfer.empty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop the device and the visualization.\r\n     */\r\n    stopDevice() {\r\n        this.active = false;\r\n\r\n        // stop visualization\r\n        this.disconnect();\r\n\r\n        // stop stream from device\r\n        if (this.stream) {\r\n            // MediaStream.stop is deprecated since:\r\n            // - Firefox 44 (https://www.fxsitecompat.com/en-US/docs/2015/mediastream-stop-has-been-deprecated/)\r\n            // - Chrome 45 (https://developers.google.com/web/updates/2015/07/mediastream-deprecations)\r\n            if (\r\n                (this.browser.browser === 'chrome' &&\r\n                    this.browser.version >= 45) ||\r\n                (this.browser.browser === 'firefox' &&\r\n                    this.browser.version >= 44) ||\r\n                this.browser.browser === 'edge' ||\r\n                this.browser.browser === 'safari'\r\n            ) {\r\n                if (this.stream.getTracks) {\r\n                    // note that this should not be a call\r\n                    this.stream.getTracks().forEach(stream => stream.stop());\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this.stream.stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect the media sources that feed the visualization.\r\n     */\r\n    connect() {\r\n        if (this.stream !== undefined) {\r\n            // Create a local buffer for data to be copied to the Wavesurfer buffer for Edge\r\n            if (this.browser.browser === 'edge') {\r\n                this.localAudioBuffer = this.micContext.createBuffer(\r\n                    this.numberOfInputChannels,\r\n                    this.bufferSize,\r\n                    this.micContext.sampleRate\r\n                );\r\n            }\r\n\r\n            // Create an AudioNode from the stream.\r\n            this.mediaStreamSource = this.micContext.createMediaStreamSource(\r\n                this.stream\r\n            );\r\n\r\n            this.levelChecker = this.micContext.createScriptProcessor(\r\n                this.bufferSize,\r\n                this.numberOfInputChannels,\r\n                this.numberOfOutputChannels\r\n            );\r\n            this.mediaStreamSource.connect(this.levelChecker);\r\n\r\n            this.levelChecker.connect(this.micContext.destination);\r\n            this.levelChecker.onaudioprocess = this.reloadBufferFunction;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect the media sources that feed the visualization.\r\n     */\r\n    disconnect() {\r\n        if (this.mediaStreamSource !== undefined) {\r\n            this.mediaStreamSource.disconnect();\r\n        }\r\n\r\n        if (this.levelChecker !== undefined) {\r\n            this.levelChecker.disconnect();\r\n            this.levelChecker.onaudioprocess = undefined;\r\n        }\r\n\r\n        if (this.localAudioBuffer !== undefined) {\r\n            this.localAudioBuffer = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redraw the waveform.\r\n     *\r\n     * @param {object} event Audioprocess event\r\n     */\r\n    reloadBuffer(event) {\r\n        if (!this.paused) {\r\n            this.wavesurfer.empty();\r\n\r\n            if (this.browser.browser === 'edge') {\r\n                // copy audio data to a local audio buffer,\r\n                // from https://github.com/audiojs/audio-buffer-utils\r\n                let channel, l;\r\n                for (\r\n                    channel = 0,\r\n                    l = Math.min(\r\n                        this.localAudioBuffer.numberOfChannels,\r\n                        event.inputBuffer.numberOfChannels\r\n                    );\r\n                    channel < l;\r\n                    channel++\r\n                ) {\r\n                    this.localAudioBuffer\r\n                        .getChannelData(channel)\r\n                        .set(event.inputBuffer.getChannelData(channel));\r\n                }\r\n\r\n                this.wavesurfer.loadDecodedBuffer(this.localAudioBuffer);\r\n            } else {\r\n                this.wavesurfer.loadDecodedBuffer(event.inputBuffer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Audio input device is ready.\r\n     *\r\n     * @param {MediaStream} stream The microphone's media stream.\r\n     */\r\n    gotStream(stream) {\r\n        this.stream = stream;\r\n        this.active = true;\r\n\r\n        // start visualization\r\n        this.play();\r\n\r\n        // notify listeners\r\n        this.fireEvent('deviceReady', stream);\r\n    }\r\n\r\n    /**\r\n     * Device error callback.\r\n     *\r\n     * @param {string} code Error message\r\n     */\r\n    deviceError(code) {\r\n        // notify listeners\r\n        this.fireEvent('deviceError', code);\r\n    }\r\n\r\n    /**\r\n     * Extract browser version out of the provided user agent string.\r\n     * @param {!string} uastring userAgent string.\r\n     * @param {!string} expr Regular expression used as match criteria.\r\n     * @param {!number} pos position in the version string to be returned.\r\n     * @return {!number} browser version.\r\n     */\r\n    extractVersion(uastring, expr, pos) {\r\n        const match = uastring.match(expr);\r\n        return match && match.length >= pos && parseInt(match[pos], 10);\r\n    }\r\n\r\n    /**\r\n     * Browser detector.\r\n     * @return {object} result containing browser, version and minVersion\r\n     *     properties.\r\n     */\r\n    detectBrowser() {\r\n        // Returned result object.\r\n        const result = {};\r\n        result.browser = null;\r\n        result.version = null;\r\n        result.minVersion = null;\r\n\r\n        // Non supported browser.\r\n        if (typeof window === 'undefined' || !window.navigator) {\r\n            result.browser = 'Not a supported browser.';\r\n            return result;\r\n        }\r\n\r\n        if (navigator.mozGetUserMedia) {\r\n            // Firefox\r\n            result.browser = 'firefox';\r\n            result.version = this.extractVersion(\r\n                navigator.userAgent,\r\n                /Firefox\\/(\\d+)\\./,\r\n                1\r\n            );\r\n            result.minVersion = 31;\r\n            return result;\r\n        } else if (navigator.webkitGetUserMedia) {\r\n            // Chrome/Chromium/Webview/Opera\r\n            result.browser = 'chrome';\r\n            result.version = this.extractVersion(\r\n                navigator.userAgent,\r\n                /Chrom(e|ium)\\/(\\d+)\\./,\r\n                2\r\n            );\r\n            result.minVersion = 38;\r\n            return result;\r\n        } else if (\r\n            navigator.mediaDevices &&\r\n            navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)\r\n        ) {\r\n            // Edge\r\n            result.browser = 'edge';\r\n            result.version = this.extractVersion(\r\n                navigator.userAgent,\r\n                /Edge\\/(\\d+).(\\d+)$/,\r\n                2\r\n            );\r\n            result.minVersion = 10547;\r\n            return result;\r\n        } else if (\r\n            window.RTCPeerConnection &&\r\n            navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)\r\n        ) {\r\n            // Safari\r\n            result.browser = 'safari';\r\n            result.minVersion = 11;\r\n            result.version = this.extractVersion(\r\n                navigator.userAgent,\r\n                /AppleWebKit\\/(\\d+)\\./,\r\n                1\r\n            );\r\n            return result;\r\n        }\r\n\r\n        // Non supported browser default.\r\n        result.browser = 'Not a supported browser.';\r\n        return result;\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(872);\n"],"sourceRoot":""}